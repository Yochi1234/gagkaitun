--[[  
    @author Enhanced Auto-Farm for Grow a Garden - FIXED VERSION
    @description Smart farming: Start with Carrots ‚Üí Switch to Tomatoes when affordable ‚Üí Auto-equip seeds
    @fixes: ‡∏õ‡∏•‡∏π‡∏Å‡∏ú‡∏±‡∏Å‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß, ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÉ‡∏Å‡∏•‡πâ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô, ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
]]

task.wait(3)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

if not LocalPlayer then return end
if not LocalPlayer.Character then LocalPlayer.CharacterAdded:Wait() end

-- Wait for leaderstats
local function WaitForLeaderstats()
    local stats, tries = LocalPlayer:FindFirstChild("leaderstats"), 0
    while not stats and tries < 30 do
        stats = LocalPlayer:FindFirstChild("leaderstats")
        tries += 1
        task.wait(0.5)
    end
    return stats
end

local Leaderstats = WaitForLeaderstats()
if not Leaderstats then return print("‚ùå No leaderstats") end

local Sheckles = Leaderstats:FindFirstChild("Sheckles") or Leaderstats:FindFirstChild("Money") or Leaderstats:FindFirstChild("Cash")
if not Sheckles then return print("‚ùå No Sheckles/Money/Cash found") end

-- GameEvents - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏∏‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
local GameEvents
for _, name in {"GameEvents", "Events", "Remotes", "RE", "ServerEvents", "RemoteEvents", "RF", "RemoteFunctions"} do
    local g = ReplicatedStorage:FindFirstChild(name)
    if g then 
        GameEvents = g 
        print("‚úÖ ‡∏û‡∏ö GameEvents: " .. name)
        break 
    end
end
if not GameEvents then return print("‚ùå GameEvents not found") end

-- Get my farm - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏ü‡∏≤‡∏£‡πå‡∏°
local function GetMyFarm()
    for _, v in pairs(Workspace:GetDescendants()) do
        if v.Name == "Farm" or v.Name:match("Farm") then
            if v:FindFirstChild("Important") and v.Important:FindFirstChild("Data") then
                local owner = v.Important.Data:FindFirstChild("Owner")
                if owner and owner.Value == LocalPlayer.Name then
                    return v
                end
            end
        end
    end
    -- ‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
    for _, v in pairs(Workspace:GetChildren()) do
        if v:IsA("Model") and v:FindFirstChild("Important") then
            local data = v.Important:FindFirstChild("Data")
            if data and data:FindFirstChild("Owner") and data.Owner.Value == LocalPlayer.Name then
                return v
            end
        end
    end
end

local function WaitForMyFarm(timeout)
    timeout = timeout or 15
    local t = 0
    while t < timeout do
        local f = GetMyFarm()
        if f then 
            print("‚úÖ ‡∏û‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤: " .. f.Name)
            return f 
        end
        task.wait(0.5)
        t += 0.5
    end
    return nil
end

-- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°
local function GetFarmCenter(farm)
    if not farm then return Vector3.new(0, 4, 0) end
    
    local plantLocations = farm:FindFirstChild("Important") and farm.Important:FindFirstChild("Plant_Locations")
    if plantLocations then
        local positions = {}
        for _, location in pairs(plantLocations:GetChildren()) do
            if location:IsA("BasePart") then
                table.insert(positions, location.Position)
            end
        end
        if #positions > 0 then
            local avgX, avgY, avgZ = 0, 0, 0
            for _, pos in ipairs(positions) do
                avgX += pos.X
                avgY += pos.Y
                avgZ += pos.Z
            end
            return Vector3.new(avgX/#positions, avgY/#positions + 2, avgZ/#positions)
        end
    end
    
    -- ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°
    if farm:IsA("Model") and farm.PrimaryPart then
        return farm.PrimaryPart.Position + Vector3.new(0, 2, 0)
    end
    
    for _, part in ipairs(farm:GetDescendants()) do
        if part:IsA("BasePart") and part.Name:lower():match("base") then
            return part.Position + Vector3.new(0, 2, 0)
        end
    end
    
    return Vector3.new(0, 4, 0)
end

-- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
local function TryBuySeed(seedName)
    print("üõí ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î: " .. seedName)
    
    local bought = false
    local buyEvents = {
        "BuySeed", "BuySeedStock", "BuySeeds", "PurchaseSeed", 
        "Buy_Seed", "BuyItem", "Purchase", "Shop", "BuySeedFromShop"
    }
    
    for _, evt in pairs(buyEvents) do
        local event = GameEvents:FindFirstChild(evt)
        if event then
            print("üì° ‡∏û‡∏ö Event: " .. evt)
            for i = 1, 10 do -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á
                local success, err = pcall(function()
                    if event:IsA("RemoteEvent") then
                        event:FireServer(seedName)
                    elseif event:IsA("RemoteFunction") then
                        event:InvokeServer(seedName)
                    end
                end)
                if success then 
                    bought = true
                    print("‚úÖ ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î " .. seedName .. " ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                else
                    print("‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: " .. tostring(err))
                end
                task.wait(0.1)
            end
            if bought then break end
        end
    end
    
    -- ‡∏•‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô
    if not bought then
        for _, event in pairs(GameEvents:GetChildren()) do
            if event:IsA("RemoteEvent") and event.Name:lower():match("buy") then
                pcall(function()
                    event:FireServer(seedName)
                    event:FireServer({seed = seedName})
                    event:FireServer(seedName, 1)
                end)
                task.wait(0.05)
            end
        end
    end
    
    return bought
end

-- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ñ‡∏∑‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤
local function EquipSeed(seedName)
    local char = LocalPlayer.Character
    if not char then return false end
    
    local humanoid = char:FindFirstChild("Humanoid")
    if not humanoid then return false end
    
    -- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏•‡πá‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤
    local seedTool = nil
    
    -- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤
    for _, item in pairs(LocalPlayer.Backpack:GetChildren()) do
        if item:IsA("Tool") then
            -- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "Seed" ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            if item.Name:find("Seed") and (item.Name:find(seedName) or item.Name:lower():find(seedName:lower())) then
                seedTool = item
                print("üîç ‡∏û‡∏ö‡πÄ‡∏°‡∏•‡πá‡∏î: " .. item.Name)
                break
            end
        end
    end
    
    -- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ñ‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    if not seedTool then
        local equippedTool = char:FindFirstChildOfClass("Tool")
        if equippedTool and equippedTool.Name:find("Seed") and (equippedTool.Name:find(seedName) or equippedTool.Name:lower():find(seedName:lower())) then
            print("‚úÖ ‡∏ñ‡∏∑‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: " .. equippedTool.Name)
            return true
        end
        
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏•‡πá‡∏î " .. seedName .. " ‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤")
        return false
    end
    
    -- ‡∏ñ‡∏∑‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î
    humanoid:EquipTool(seedTool)
    task.wait(0.2)
    
    -- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ñ‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    local equippedTool = char:FindFirstChildOfClass("Tool")
    if equippedTool and equippedTool.Name:find("Seed") then
        print("‚úÖ ‡∏ñ‡∏∑‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " .. equippedTool.Name)
        return true
    else
        print("‚ùå ‡∏ñ‡∏∑‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return false
    end
end

-- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ñ‡∏∑‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏•‡∏π‡∏Å
local function PlantSeed(seedName)
    local farm = WaitForMyFarm()
    if not farm then 
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°")
        return false 
    end

    local locations = farm.Important:FindFirstChild("Plant_Locations")
    if not locations then 
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Plant_Locations")
        return false 
    end

    local char = LocalPlayer.Character
    local hrp = char and char:FindFirstChild("HumanoidRootPart")
    if not hrp then 
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£")
        return false 
    end

    -- ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÑ‡∏õ‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏Å‡πà‡∏≠‡∏ô
    local centerPos = GetFarmCenter(farm)
    hrp.CFrame = CFrame.new(centerPos)
    task.wait(0.3)
    print("üöÄ ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÑ‡∏õ‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÅ‡∏•‡πâ‡∏ß")

    -- *** ‡∏ñ‡∏∑‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏•‡∏π‡∏Å ***
    if not EquipSeed(seedName) then
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏∑‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î " .. seedName .. " ‡πÑ‡∏î‡πâ")
        return false
    end

    -- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Plant_RE ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
    local plantEvent = GameEvents:FindFirstChild("Plant_RE")
    if not plantEvent then
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Plant_RE")
        return false
    end
    
    print("‚úÖ ‡∏û‡∏ö Plant_RE Event!")

    local planted = 0
    local locationsList = {}
    
    -- ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
    for _, part in pairs(locations:GetChildren()) do
        if part:IsA("BasePart") then
            table.insert(locationsList, part.Position)
        end
    end
    
    print("üìç ‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏•‡∏π‡∏Å: " .. #locationsList .. " ‡∏à‡∏∏‡∏î")
    
    -- ‡∏õ‡∏•‡∏π‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    for i, pos in ipairs(locationsList) do
        -- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏ñ‡∏∑‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        local equippedTool = char:FindFirstChildOfClass("Tool")
        if not equippedTool or not equippedTool.Name:find("Seed") then
            print("‚ö†Ô∏è ‡πÄ‡∏°‡∏•‡πá‡∏î‡∏´‡∏°‡∏î ‡∏•‡∏≠‡∏á‡∏ñ‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà...")
            if not EquipSeed(seedName) then
                break
            end
        end
        
        local adjustedPos = pos + Vector3.new(0, 0.1, 0)
        
        -- ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Plant_RE
        local plantFormats = {
            function() plantEvent:FireServer(adjustedPos, seedName) end,
            function() plantEvent:FireServer(seedName, adjustedPos) end,
            function() plantEvent:FireServer({position = adjustedPos, seed = seedName}) end,
            function() plantEvent:FireServer({pos = adjustedPos, seedType = seedName}) end,
            function() plantEvent:FireServer(seedName, adjustedPos.X, adjustedPos.Y, adjustedPos.Z) end,
            function() plantEvent:FireServer(adjustedPos.X, adjustedPos.Y, adjustedPos.Z, seedName) end,
            function() plantEvent:FireServer(i, seedName) end,
            function() plantEvent:FireServer(seedName, i) end,
            function() plantEvent:FireServer() end, -- ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏≠‡∏∞‡πÑ‡∏£ ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å tool
            function() plantEvent:FireServer(adjustedPos) end -- ‡∏™‡πà‡∏á‡πÅ‡∏Ñ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        }
        
        local success = false
        for formatIndex, plantFunc in ipairs(plantFormats) do
            local ok, err = pcall(plantFunc)
            if ok then
                success = true
                planted += 1
                print("üå± ‡∏õ‡∏•‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà " .. i .. " ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö " .. formatIndex .. ")")
                break
            end
        end
        
        if not success then
            print("‚ùå ‡∏õ‡∏•‡∏π‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà " .. i .. " ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö")
        end
        
        task.wait(0.15) -- ‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        
        if planted >= 25 then break end
    end
    
    print("üå± ‡∏õ‡∏•‡∏π‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à " .. planted .. "/" .. #locationsList .. " ‡∏ï‡πâ‡∏ô (" .. seedName .. ")")
    return planted > 0
end

-- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß
local function Harvest()
    local farm = WaitForMyFarm()
    if not farm then return 0 end
    
    local plants = farm.Important:FindFirstChild("Plants_Physical")
    if not plants then 
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å")
        return 0 
    end

    local char = LocalPlayer.Character
    if not char then return 0 end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return 0 end

    local harvested = 0
    local centerPos = GetFarmCenter(farm)
    hrp.CFrame = CFrame.new(centerPos)
    task.wait(0.1)

    for _, crop in pairs(plants:GetChildren()) do
        if crop:IsA("Model") or crop:IsA("BasePart") then
            local prompt = crop:FindFirstChildWhichIsA("ProximityPrompt", true)
            if prompt and prompt.Enabled then
                local success = pcall(function() 
                    fireproximityprompt(prompt) 
                end)
                if success then
                    harvested += 1
                end
                task.wait(0.02)
            end
        end
    end

    if harvested > 0 then
        print("üåæ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡πÑ‡∏î‡πâ: " .. harvested .. " ‡∏ú‡∏•")
    end
    return harvested
end

-- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ - ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÉ‡∏Å‡∏•‡πâ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
local function Sell()
    print("üí∞ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏õ‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á...")
    
    -- ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î
    local shopPositions = {
        CFrame.new(62, 4, -26),   -- ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°
        CFrame.new(60, 4, -28),   -- ‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏ß‡πà‡∏≤
        CFrame.new(64, 4, -24),   -- ‡∏≠‡∏µ‡∏Å‡∏°‡∏∏‡∏°
        CFrame.new(62, 4, -30),   -- ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á
        CFrame.new(58, 4, -26)    -- ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á
    }
    
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        -- ‡∏•‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        for i, pos in ipairs(shopPositions) do
            LocalPlayer.Character.HumanoidRootPart.CFrame = pos
            task.wait(0.2)
            print("üöÄ ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÑ‡∏õ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà " .. i)
            
            -- ‡∏•‡∏≠‡∏á‡∏Ç‡∏≤‡∏¢
            local sold = false
            local sellEvents = {"SellInventory", "Sell_Inventory", "Sell", "SellAll", "SellItems", "Shop_Sell"}
            
            for _, e in pairs(sellEvents) do
                local evt = GameEvents:FindFirstChild(e)
                if evt then 
                    local success = pcall(function() 
                        if evt:IsA("RemoteEvent") then
                            evt:FireServer()
                        elseif evt:IsA("RemoteFunction") then
                            evt:InvokeServer()
                        end
                    end)
                    if success then
                        sold = true
                        print("‚úÖ ‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏î‡πâ‡∏ß‡∏¢ " .. e)
                        break
                    end
                end
            end
            
            if sold then 
                print("üí∞ ‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß - ‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: " .. Sheckles.Value)
                break 
            end
            
            task.wait(0.1)
        end
    end
end

-- ‡∏ô‡∏±‡∏ö‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤
local function GetCropCount()
    local char = LocalPlayer.Character
    local count = 0
    if not char then return 0 end
    
    local function countTools(parent)
        for _, item in pairs(parent:GetChildren()) do
            if item:IsA("Tool") then
                -- ‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡πÄ‡∏°‡∏•‡πá‡∏î ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï
                if not item.Name:find("Seed") and (item:FindFirstChild("Item_String") or item.Name:match("Carrot") or item.Name:match("Tomato")) then
                    count += 1
                end
            end
        end
    end
    
    countTools(LocalPlayer.Backpack or {})
    countTools(char)
    return count
end
local function GetSeedCount(seedName)
    local count = 0
    local allSeeds = {}
    
    -- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤
    for _, item in pairs(LocalPlayer.Backpack:GetChildren()) do
        if item:IsA("Tool") and item.Name:find("Seed") then
            table.insert(allSeeds, item.Name)
            if item.Name:find(seedName) or item.Name:lower():find(seedName:lower()) then
                count += 1
            end
        end
    end
    
    -- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà
    local char = LocalPlayer.Character
    if char then
        for _, item in pairs(char:GetChildren()) do
            if item:IsA("Tool") and item.Name:find("Seed") then
                table.insert(allSeeds, item.Name .. " (‡∏ñ‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà)")
                if item.Name:find(seedName) or item.Name:lower():find(seedName:lower()) then
                    count += 1
                end
            end
        end
    end
    
    if #allSeeds > 0 then
        print("üì¶ ‡πÄ‡∏°‡∏•‡πá‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤: " .. table.concat(allSeeds, ", "))
    else
        print("üì¶ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏•‡πá‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤")
    end
    
    return count
end

-- ‡∏ô‡∏±‡∏ö‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å
local function CountTomatoes()
    local farm = WaitForMyFarm()
    if not farm then return 0 end
    local count = 0
    local physical = farm.Important:FindFirstChild("Plants_Physical")
    if physical then
        for _, crop in pairs(physical:GetChildren()) do
            if crop.Name:match("Tomato") or crop.Name:match("tomato") then 
                count += 1 
            end
        end
    end
    return count
end

-- Main farming loop - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà
local function SmartFarm()
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà!")
    print("üìã ‡∏£‡∏∞‡∏ö‡∏ö: Carrot ‚Üí Tomato ‚Üí ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ 300 ‡∏ï‡πâ‡∏ô")
    
    local targetTomatoes = 300
    local phase = "CARROT_PHASE"
    local attempts = 0
    
    while true do
        attempts += 1
        local currentMoney = Sheckles.Value
        local tomatoCount = CountTomatoes()
        local cropCount = GetCropCount()
        
        print(string.format("üîÑ ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà %d | üí∞ ‡πÄ‡∏á‡∏¥‡∏ô: %d | üçÖ ‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®: %d/%d | üì¶ ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤: %d", 
            attempts, currentMoney, tomatoCount, targetTomatoes, cropCount))
        
        -- ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
        if tomatoCount >= targetTomatoes then
            print("üéâ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏õ‡∏•‡∏π‡∏Å‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®‡∏Ñ‡∏£‡∏ö " .. targetTomatoes .. " ‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
            break
        end
        
        -- ‡∏Ç‡∏≤‡∏¢‡∏ñ‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏ï‡πá‡∏°
        if cropCount >= 15 then
            print("üì¶ ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏ï‡πá‡∏°! ‡πÑ‡∏õ‡∏Ç‡∏≤‡∏¢...")
            Sell()
            task.wait(1)
            continue
        end
        
        -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô phase
        if phase == "CARROT_PHASE" and currentMoney >= 800 then
            phase = "TOMATO_PHASE"
            print("üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®!")
        end
        
        -- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏•‡πá‡∏î
        local seedToUse = (phase == "TOMATO_PHASE" and currentMoney >= 30) and "Tomato" or "Carrot"
        local seedCost = (seedToUse == "Tomato") and 30 or 10
        
        print("üå± ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏•‡πá‡∏î: " .. seedToUse .. " (‡∏£‡∏≤‡∏Ñ‡∏≤: " .. seedCost .. ")")
        
        -- ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏°‡∏•‡πá‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        local seedCount = GetSeedCount(seedToUse)
        print("üì¶ ‡∏°‡∏µ‡πÄ‡∏°‡∏•‡πá‡∏î " .. seedToUse .. " ‡∏≠‡∏¢‡∏π‡πà: " .. seedCount .. " ‡∏ä‡∏¥‡πâ‡∏ô")
        
        -- ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏û‡∏≠
        if seedCount == 0 and currentMoney >= seedCost then
            print("üõí ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏•‡πá‡∏î ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡∏∑‡πâ‡∏≠...")
            TryBuySeed(seedToUse)
            task.wait(0.5)
            seedCount = GetSeedCount(seedToUse) -- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        end
        
        -- ‡∏õ‡∏•‡∏π‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏°‡∏•‡πá‡∏î
        if seedCount > 0 then
            local planted = PlantSeed(seedToUse)
            if planted then
                task.wait(0.5)
            else
                print("‚ö†Ô∏è ‡∏õ‡∏•‡∏π‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á...")
                task.wait(1)
            end
        else
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏•‡πá‡∏î " .. seedToUse .. " ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ")
            task.wait(2)
        end
        
        -- ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß
        local harvested = Harvest()
        if harvested > 0 then
            task.wait(0.5)
        end
        
        -- ‡∏Ç‡∏≤‡∏¢
        if cropCount > 0 then
            Sell()
            task.wait(0.5)
        end
        
        -- ‡∏û‡∏±‡∏Å‡∏™‡∏±‡πâ‡∏ô‡πÜ
        task.wait(0.2)
        
        -- ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á
        if attempts > 1000 then
            print("‚ö†Ô∏è ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó...")
            attempts = 0
            task.wait(5)
        end
    end
end

-- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
print("üéÆ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°...")
task.wait(2)
SmartFarm()
