--[[
    @author Simple Auto-Farm for Grow a Garden
    @description One-button auto everything script
    https://www.roblox.com/games/126884695634066
]]

--// Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local Leaderstats = LocalPlayer.leaderstats
local Backpack = LocalPlayer.Backpack
local PlayerGui = LocalPlayer.PlayerGui

local ShecklesCount = Leaderstats.Sheckles

--// Folders
local GameEvents = ReplicatedStorage.GameEvents
local Farms = workspace.Farm

--// Progression System
local SeedProgression = {
    {name = "Carrot", price = 5, unlock = 0},
    {name = "Corn", price = 15, unlock = 100},
    {name = "Tomato", price = 25, unlock = 500},
    {name = "Potato", price = 40, unlock = 1000},
    {name = "Watermelon", price = 80, unlock = 2500},
    {name = "Pumpkin", price = 150, unlock = 5000},
    {name = "Blueberry", price = 300, unlock = 10000},
}

--// Global Variables
local IsRunning = false
local AutoEnabled = false

--// Simple GUI
local ScreenGui = Instance.new("ScreenGui")
local MainFrame = Instance.new("Frame")
local ToggleButton = Instance.new("TextButton")
local StatusLabel = Instance.new("TextLabel")

ScreenGui.Name = "AutoFarmGUI"
ScreenGui.Parent = game.CoreGui

MainFrame.Name = "MainFrame"
MainFrame.Parent = ScreenGui
MainFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
MainFrame.BorderSizePixel = 0
MainFrame.Position = UDim2.new(0, 10, 0, 10)
MainFrame.Size = UDim2.new(0, 200, 0, 100)

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 8)
corner.Parent = MainFrame

ToggleButton.Name = "ToggleButton"
ToggleButton.Parent = MainFrame
ToggleButton.BackgroundColor3 = Color3.fromRGB(255, 85, 85)
ToggleButton.Position = UDim2.new(0.1, 0, 0.2, 0)
ToggleButton.Size = UDim2.new(0.8, 0, 0.4, 0)
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.Text = "ðŸš€ START AUTO"
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.TextScaled = true

local toggleCorner = Instance.new("UICorner")
toggleCorner.CornerRadius = UDim.new(0, 6)
toggleCorner.Parent = ToggleButton

StatusLabel.Name = "StatusLabel"
StatusLabel.Parent = MainFrame
StatusLabel.BackgroundTransparency = 1
StatusLabel.Position = UDim2.new(0.1, 0, 0.7, 0)
StatusLabel.Size = UDim2.new(0.8, 0, 0.2, 0)
StatusLabel.Font = Enum.Font.Gotham
StatusLabel.Text = "Ready to start!"
StatusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
StatusLabel.TextScaled = true

--// Utility Functions
local function GetBestSeed()
    local money = ShecklesCount.Value
    local bestSeed = "Carrot"
    
    for i = #SeedProgression, 1, -1 do
        local seed = SeedProgression[i]
        if money >= seed.unlock then
            bestSeed = seed.name
            break
        end
    end
    
    return bestSeed
end

local function GetMyFarm()
    for _, Farm in pairs(Farms:GetChildren()) do
        local Owner = Farm.Important.Data.Owner.Value
        if Owner == LocalPlayer.Name then
            return Farm
        end
    end
end

local function TeleportToSell()
    local Character = LocalPlayer.Character
    if Character then
        Character:PivotTo(CFrame.new(62, 4, -26))
        wait(0.3)
    end
end

local function GetOwnedSeeds()
    local seeds = {}
    local Character = LocalPlayer.Character
    
    for _, tool in pairs(Backpack:GetChildren()) do
        local plantName = tool:FindFirstChild("Plant_Name")
        local count = tool:FindFirstChild("Numbers")
        if plantName and count then
            seeds[plantName.Value] = {tool = tool, count = count.Value}
        end
    end
    
    if Character then
        for _, tool in pairs(Character:GetChildren()) do
            local plantName = tool:FindFirstChild("Plant_Name")
            local count = tool:FindFirstChild("Numbers")
            if plantName and count then
                seeds[plantName.Value] = {tool = tool, count = count.Value}
            end
        end
    end
    
    return seeds
end

local function GetCropCount()
    local count = 0
    local Character = LocalPlayer.Character
    
    for _, tool in pairs(Backpack:GetChildren()) do
        if tool:FindFirstChild("Item_String") then
            count = count + 1
        end
    end
    
    if Character then
        for _, tool in pairs(Character:GetChildren()) do
            if tool:FindFirstChild("Item_String") then
                count = count + 1
            end
        end
    end
    
    return count
end

--// Main Functions
local function BuySeeds()
    local bestSeed = GetBestSeed()
    local money = ShecklesCount.Value
    
    -- Calculate how many we can afford
    local seedData
    for _, seed in pairs(SeedProgression) do
        if seed.name == bestSeed then
            seedData = seed
            break
        end
    end
    
    if seedData then
        local canBuy = math.floor(money / seedData.price)
        if canBuy > 0 then
            local buyAmount = math.min(canBuy, 20) -- Limit to prevent lag
            for i = 1, buyAmount do
                GameEvents.BuySeedStock:FireServer(bestSeed)
                wait(0.1)
            end
            StatusLabel.Text = `Bought {buyAmount} {bestSeed}`
        end
    end
end

local function PlantSeeds()
    local myFarm = GetMyFarm()
    if not myFarm then return end
    
    local plantLocations = myFarm.Important.Plant_Locations
    local farmLands = plantLocations:GetChildren()
    if #farmLands == 0 then return end
    
    local ownedSeeds = GetOwnedSeeds()
    local bestSeed = GetBestSeed()
    local seedData = ownedSeeds[bestSeed]
    
    if not seedData or seedData.count <= 0 then return end
    
    -- Equip the tool
    local Character = LocalPlayer.Character
    if Character and seedData.tool.Parent == Backpack then
        Character.Humanoid:EquipTool(seedData.tool)
    end
    
    -- Plant in random locations
    local farmLand = farmLands[1]
    local center = farmLand:GetPivot()
    local size = farmLand.Size
    
    for i = 1, math.min(seedData.count, 15) do
        local x = center.X + math.random(-size.X/2, size.X/2)
        local z = center.Z + math.random(-size.Z/2, size.Z/2)
        local position = Vector3.new(x, 0.13, z)
        
        GameEvents.Plant_RE:FireServer(position, bestSeed)
        wait(0.2)
    end
    
    StatusLabel.Text = `Planted {bestSeed} seeds`
end

local function HarvestCrops()
    local myFarm = GetMyFarm()
    if not myFarm then return end
    
    local plantsPhysical = myFarm.Important.Plants_Physical
    local harvestedCount = 0
    
    local function harvestInFolder(folder)
        for _, plant in pairs(folder:GetChildren()) do
            -- Check for fruits folder
            local fruits = plant:FindFirstChild("Fruits")
            if fruits then
                harvestInFolder(fruits)
            end
            
            -- Try to harvest
            local prompt = plant:FindFirstChild("ProximityPrompt", true)
            if prompt and prompt.Enabled then
                fireproximityprompt(prompt)
                harvestedCount = harvestedCount + 1
                wait(0.1)
            end
        end
    end
    
    harvestInFolder(plantsPhysical)
    
    if harvestedCount > 0 then
        StatusLabel.Text = `Harvested {harvestedCount} crops`
    end
end

local function SellCrops()
    local cropCount = GetCropCount()
    if cropCount < 5 then return end
    
    local previousMoney = ShecklesCount.Value
    TeleportToSell()
    
    local attempts = 0
    while attempts < 30 do
        GameEvents.Sell_Inventory:FireServer()
        wait(0.2)
        attempts = attempts + 1
        
        if ShecklesCount.Value > previousMoney then
            break
        end
    end
    
    StatusLabel.Text = `Sold crops! Money: ${ShecklesCount.Value}`
end

local function AutoWalk()
    local myFarm = GetMyFarm()
    if not myFarm then return end
    
    local Character = LocalPlayer.Character
    if not Character then return end
    
    local plantsPhysical = myFarm.Important.Plants_Physical
    local humanoid = Character.Humanoid
    
    -- Find harvestable plants
    local targets = {}
    local function findTargets(folder)
        for _, plant in pairs(folder:GetChildren()) do
            local fruits = plant:FindFirstChild("Fruits")
            if fruits then
                findTargets(fruits)
            end
            
            local prompt = plant:FindFirstChild("ProximityPrompt", true)
            if prompt and prompt.Enabled then
                table.insert(targets, plant)
            end
        end
    end
    
    findTargets(plantsPhysical)
    
    -- Move to targets
    if #targets > 0 then
        local target = targets[math.random(1, #targets)]
        local position = target:GetPivot().Position
        humanoid:MoveTo(position)
        StatusLabel.Text = `Walking to {target.Name}`
    else
        -- Move to random farm location
        local plantLocations = myFarm.Important.Plant_Locations
        local farmLands = plantLocations:GetChildren()
        if #farmLands > 0 then
            local farmLand = farmLands[math.random(1, #farmLands)]
            local center = farmLand:GetPivot()
            local size = farmLand.Size
            local x = center.X + math.random(-size.X/2, size.X/2)
            local z = center.Z + math.random(-size.Z/2, size.Z/2)
            humanoid:MoveTo(Vector3.new(x, 4, z))
            StatusLabel.Text = "Walking randomly"
        end
    end
end

--// Main Auto Loop
local function AutoLoop()
    while AutoEnabled do
        pcall(function()
            -- 1. Buy seeds if we have money
            if ShecklesCount.Value >= 10 then
                BuySeeds()
            end
            
            wait(1)
            
            -- 2. Plant seeds if we have any
            PlantSeeds()
            
            wait(1)
            
            -- 3. Harvest crops
            HarvestCrops()
            
            wait(1)
            
            -- 4. Sell if we have enough crops
            SellCrops()
            
            wait(2)
            
            -- 5. Walk around
            AutoWalk()
            
            wait(3)
        end)
    end
end

--// Button Functions
local function ToggleAuto()
    AutoEnabled = not AutoEnabled
    
    if AutoEnabled then
        ToggleButton.Text = "ðŸ›‘ STOP AUTO"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(85, 255, 85)
        StatusLabel.Text = "Auto-farm started!"
        
        -- Start the auto loop
        coroutine.wrap(AutoLoop)()
    else
        ToggleButton.Text = "ðŸš€ START AUTO"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(255, 85, 85)
        StatusLabel.Text = "Auto-farm stopped!"
    end
end

--// Connect Events
ToggleButton.MouseButton1Click:Connect(ToggleAuto)

-- Auto-start for new players (optional)
if ShecklesCount.Value <= 30 then
    wait(2)
    StatusLabel.Text = "New player detected!"
    wait(1)
    ToggleAuto() -- Auto-start
end

-- Status updater
coroutine.wrap(function()
    while wait(2) do
        if not AutoEnabled then
            StatusLabel.Text = `Money: ${ShecklesCount.Value} | Crops: {GetCropCount()}`
        end
    end
end)()

print("ðŸŒ± Simple Auto-Farm loaded! Click the button to start!")
