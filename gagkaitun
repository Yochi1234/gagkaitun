--[[
    @author Enhanced Auto-Farm for Grow a Garden - FULLY FIXED VERSION
    @description Smart auto-farm with comprehensive error handling and nil value fixes
    https://www.roblox.com/games/126884695634066
]]

--// Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer.Backpack
local PlayerGui = LocalPlayer.PlayerGui

-- Enhanced wait for character and leaderstats
local function WaitForCharacterAndStats()
    local Character = LocalPlayer.CharacterAdded:Wait()
    local Leaderstats = LocalPlayer:WaitForChild("leaderstats", 15)
    
    if not Leaderstats then
        warn("‚ùå Leaderstats not found! Game may not be fully loaded.")
        return nil, nil
    end
    
    return Character, Leaderstats
end

local Character, Leaderstats = WaitForCharacterAndStats()
if not Leaderstats then
    return
end

-- Find the money stat with better error handling
local ShecklesCount = Leaderstats:FindFirstChild("Sheckles") or 
                     Leaderstats:FindFirstChild("Money") or 
                     Leaderstats:FindFirstChild("Cash") or 
                     Leaderstats:FindFirstChild("Coins") or
                     Leaderstats:FindFirstChild("Currency")

if not ShecklesCount then
    warn("‚ùå Money stat not found in leaderstats!")
    print("üìã Available stats:")
    for _, stat in pairs(Leaderstats:GetChildren()) do
        print(`  - {stat.Name}`)
    end
    return
end

print(`üí∞ Found money stat: {ShecklesCount.Name}`)

--// Enhanced Folders and Remotes Detection with nil checks
local GameEvents = nil
local Farms = nil

-- Safe detection function with multiple attempts
local function SafeDetectGameStructure()
    print("üîç Safely detecting game structure...")
    
    -- Wait for game to fully load
    task.wait(3)
    
    -- Check ReplicatedStorage structure with error handling
    local possibleEventFolders = {"GameEvents", "Events", "Remotes", "RemoteEvents"}
    for _, folderName in pairs(possibleEventFolders) do
        local success, folder = pcall(function()
            return ReplicatedStorage:FindFirstChild(folderName)
        end)
        
        if success and folder then
            GameEvents = folder
            print(`üìÅ Found events folder: {folderName}`)
            break
        end
    end
    
    -- Check workspace farm structure with error handling
    local possibleFarmFolders = {"Farm", "Farms", "FarmPlots", "PlayerFarms"}
    for _, folderName in pairs(possibleFarmFolders) do
        local success, folder = pcall(function()
            return workspace:FindFirstChild(folderName)
        end)
        
        if success and folder then
            Farms = folder
            print(`üåæ Found farms folder: {folderName}`)
            break
        end
    end
    
    -- Debug information
    if GameEvents then
        print("üìã Available GameEvents:")
        for _, child in pairs(GameEvents:GetChildren()) do
            print(`  - {child.Name} ({child.ClassName})`)
        end
    else
        print("‚ùå No GameEvents folder found!")
    end
    
    return GameEvents ~= nil and Farms ~= nil
end

--// Progression System
local SeedProgression = {
    {name = "Carrot", price = 5, unlock = 0},
    {name = "Corn", price = 15, unlock = 100},
    {name = "Tomato", price = 25, unlock = 500},
    {name = "Potato", price = 40, unlock = 1000},
    {name = "Watermelon", price = 80, unlock = 2500},
    {name = "Pumpkin", price = 150, unlock = 5000},
    {name = "Blueberry", price = 300, unlock = 10000},
}

--// Global Variables
local IsRunning = false
local AutoEnabled = false
local AutoLoopConnection = nil
local MAX_BACKPACK_SIZE = 20
local MIN_CROPS_TO_SELL = 3

--// Warp Positions
local WarpPositions = {
    Sell = CFrame.new(62, 4, -26),
    Shop = CFrame.new(0, 4, 0),
    Farm = nil
}

--// Enhanced GUI with better error handling
local function CreateGUI()
    local success, result = pcall(function()
        local ScreenGui = Instance.new("ScreenGui")
        local MainFrame = Instance.new("Frame")
        local ToggleButton = Instance.new("TextButton")
        local StatusLabel = Instance.new("TextLabel")
        local InfoLabel = Instance.new("TextLabel")

        ScreenGui.Name = "EnhancedAutoFarmGUI"
        ScreenGui.Parent = game.CoreGui

        MainFrame.Name = "MainFrame"
        MainFrame.Parent = ScreenGui
        MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
        MainFrame.BorderSizePixel = 0
        MainFrame.Position = UDim2.new(0, 10, 0, 10)
        MainFrame.Size = UDim2.new(0, 220, 0, 130)

        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 10)
        corner.Parent = MainFrame

        ToggleButton.Name = "ToggleButton"
        ToggleButton.Parent = MainFrame
        ToggleButton.BackgroundColor3 = Color3.fromRGB(46, 125, 50)
        ToggleButton.Position = UDim2.new(0.05, 0, 0.15, 0)
        ToggleButton.Size = UDim2.new(0.9, 0, 0.35, 0)
        ToggleButton.Font = Enum.Font.GothamBold
        ToggleButton.Text = "üöÄ START ENHANCED AUTO"
        ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        ToggleButton.TextScaled = true

        local toggleCorner = Instance.new("UICorner")
        toggleCorner.CornerRadius = UDim.new(0, 8)
        toggleCorner.Parent = ToggleButton

        StatusLabel.Name = "StatusLabel"
        StatusLabel.Parent = MainFrame
        StatusLabel.BackgroundTransparency = 1
        StatusLabel.Position = UDim2.new(0.05, 0, 0.55, 0)
        StatusLabel.Size = UDim2.new(0.9, 0, 0.2, 0)
        StatusLabel.Font = Enum.Font.GothamMedium
        StatusLabel.Text = "üå± Ready to farm!"
        StatusLabel.TextColor3 = Color3.fromRGB(76, 175, 80)
        StatusLabel.TextScaled = true

        InfoLabel.Name = "InfoLabel"
        InfoLabel.Parent = MainFrame
        InfoLabel.BackgroundTransparency = 1
        InfoLabel.Position = UDim2.new(0.05, 0, 0.75, 0)
        InfoLabel.Size = UDim2.new(0.9, 0, 0.2, 0)
        InfoLabel.Font = Enum.Font.Gotham
        InfoLabel.Text = "üí∞ $0 | üì¶ 0 crops"
        InfoLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
        InfoLabel.TextScaled = true

        return ScreenGui, MainFrame, ToggleButton, StatusLabel, InfoLabel
    end)
    
    if not success then
        warn("‚ùå Failed to create GUI: " .. tostring(result))
        return nil
    end
    
    return result
end

local ScreenGui, MainFrame, ToggleButton, StatusLabel, InfoLabel = CreateGUI()
if not ScreenGui then
    return
end

--// Enhanced Utility Functions with nil checks
local function SafeWarp(targetCFrame, speed)
    local success, result = pcall(function()
        local Character = LocalPlayer.Character
        if not Character or not Character:FindFirstChild("HumanoidRootPart") then 
            return false 
        end
        
        local HumanoidRootPart = Character.HumanoidRootPart
        HumanoidRootPart.CFrame = targetCFrame
        task.wait(0.2)
        return true
    end)
    
    return success and result
end

local function GetBestSeed()
    if not ShecklesCount or not ShecklesCount.Value then 
        return "Carrot" 
    end
    
    local money = ShecklesCount.Value
    local bestSeed = "Carrot"
    
    for i = #SeedProgression, 1, -1 do
        local seed = SeedProgression[i]
        if money >= seed.unlock then
            bestSeed = seed.name
            break
        end
    end
    
    return bestSeed
end

local function GetMyFarm()
    if not Farms or not Farms.Parent then 
        return nil 
    end
    
    local success, result = pcall(function()
        for _, Farm in pairs(Farms:GetChildren()) do
            local Important = Farm:FindFirstChild("Important")
            if Important then
                local Data = Important:FindFirstChild("Data")
                if Data then
                    local Owner = Data:FindFirstChild("Owner")
                    if Owner and Owner.Value == LocalPlayer.Name then
                        -- Set farm warp position safely
                        local farmCFrame = Farm:GetPivot()
                        if farmCFrame then
                            WarpPositions.Farm = farmCFrame * CFrame.new(0, 5, 0)
                        end
                        return Farm
                    end
                end
            end
        end
        return nil
    end)
    
    if success then
        return result
    else
        warn("‚ùå Error getting farm: " .. tostring(result))
        return nil
    end
end

local function SafeGetOwnedSeeds()
    local seeds = {}
    
    local success = pcall(function()
        local Character = LocalPlayer.Character
        
        -- Check backpack
        if Backpack then
            for _, tool in pairs(Backpack:GetChildren()) do
                local plantName = tool:FindFirstChild("Plant_Name")
                local count = tool:FindFirstChild("Numbers")
                if plantName and count then
                    seeds[plantName.Value] = {tool = tool, count = count.Value}
                end
            end
        end
        
        -- Check character
        if Character then
            for _, tool in pairs(Character:GetChildren()) do
                local plantName = tool:FindFirstChild("Plant_Name")
                local count = tool:FindFirstChild("Numbers")
                if plantName and count then
                    seeds[plantName.Value] = {tool = tool, count = count.Value}
                end
            end
        end
    end)
    
    if not success then
        warn("‚ùå Error getting owned seeds")
    end
    
    return seeds
end

local function SafeGetCropCount()
    local count = 0
    
    local success = pcall(function()
        local Character = LocalPlayer.Character
        
        -- Check backpack
        if Backpack then
            for _, tool in pairs(Backpack:GetChildren()) do
                if tool:FindFirstChild("Item_String") then
                    count = count + 1
                end
            end
        end
        
        -- Check character
        if Character then
            for _, tool in pairs(Character:GetChildren()) do
                if tool:FindFirstChild("Item_String") then
                    count = count + 1
                end
            end
        end
    end)
    
    if not success then
        warn("‚ùå Error getting crop count")
    end
    
    return count
end

local function SafeGetHarvestableCrops()
    local myFarm = GetMyFarm()
    if not myFarm then return 0 end
    
    local success, count = pcall(function()
        local plantsPhysical = myFarm.Important:FindFirstChild("Plants_Physical")
        if not plantsPhysical then return 0 end
        
        local cropCount = 0
        local function countInFolder(folder)
            for _, plant in pairs(folder:GetChildren()) do
                local fruits = plant:FindFirstChild("Fruits")
                if fruits then
                    countInFolder(fruits)
                end
                
                local prompt = plant:FindFirstChild("ProximityPrompt", true)
                if prompt and prompt.Enabled then
                    cropCount = cropCount + 1
                end
            end
        end
        
        countInFolder(plantsPhysical)
        return cropCount
    end)
    
    return success and count or 0
end

--// Safe Remote Event Calling
local function SafeFireRemote(remoteName, ...)
    if not GameEvents then
        return false
    end
    
    local success = pcall(function()
        local remote = GameEvents:FindFirstChild(remoteName)
        if remote and remote:IsA("RemoteEvent") then
            remote:FireServer(...)
            return true
        end
        return false
    end)
    
    return success
end

--// Enhanced Main Functions with comprehensive error handling
local function SafeBuySeeds()
    if not GameEvents or not ShecklesCount then 
        return false 
    end
    
    local success = pcall(function()
        local bestSeed = GetBestSeed()
        local money = ShecklesCount.Value
        local ownedSeeds = SafeGetOwnedSeeds()
        local currentSeedCount = ownedSeeds[bestSeed] and ownedSeeds[bestSeed].count or 0
        
        if currentSeedCount < 10 then
            local seedData
            for _, seed in pairs(SeedProgression) do
                if seed.name == bestSeed then
                    seedData = seed
                    break
                end
            end
            
            if seedData and money >= seedData.price then
                if StatusLabel then
                    StatusLabel.Text = "üõí Buying seeds..."
                end
                
                local buyMethods = {
                    "BuySeedStock",
                    "BuySeed", 
                    "BuySeeds",
                    "PurchaseSeed"
                }
                
                local bought = false
                for _, method in pairs(buyMethods) do
                    if SafeFireRemote(method, bestSeed) then
                        bought = true
                        break
                    end
                    task.wait(0.1)
                end
                
                if StatusLabel then
                    StatusLabel.Text = bought and "‚úÖ Seeds bought!" or "‚ùå Buy failed"
                end
                task.wait(1)
            end
        end
    end)
    
    return success
end

local function SafeSmartPlant()
    local myFarm = GetMyFarm()
    if not myFarm then return false end
    
    local success = pcall(function()
        local plantLocations = myFarm.Important:FindFirstChild("Plant_Locations")
        if not plantLocations then return false end
        
        local farmLands = plantLocations:GetChildren()
        if #farmLands == 0 then return false end
        
        local ownedSeeds = SafeGetOwnedSeeds()
        local bestSeed = GetBestSeed()
        local seedData = ownedSeeds[bestSeed]
        
        if not seedData or seedData.count <= 0 then return false end
        
        if StatusLabel then
            StatusLabel.Text = "üå± Smart planting..."
        end
        
        if WarpPositions.Farm then
            SafeWarp(WarpPositions.Farm)
        end
        
        local Character = LocalPlayer.Character
        if Character and seedData.tool.Parent == Backpack then
            local Humanoid = Character:FindFirstChild("Humanoid")
            if Humanoid then
                Humanoid:EquipTool(seedData.tool)
                task.wait(0.5)
            end
        end
        
        local farmLand = farmLands[1]
        local center = farmLand:GetPivot()
        local plantCount = math.min(seedData.count, 8)
        
        local plantMethods = {
            "Plant_RE",
            "PlantSeed",
            "Plant"
        }
        
        for i = 1, plantCount do
            if not AutoEnabled then break end
            
            local x = center.X + math.random(-8, 8)
            local z = center.Z + math.random(-8, 8)
            local position = Vector3.new(x, 0.13, z)
            
            for _, method in pairs(plantMethods) do
                SafeFireRemote(method, position, bestSeed)
                task.wait(0.1)
            end
            task.wait(0.3)
        end
        
        if StatusLabel then
            StatusLabel.Text = `‚úÖ Planted {plantCount} {bestSeed}`
        end
    end)
    
    return success
end

local function SafeSmartHarvest()
    local myFarm = GetMyFarm()
    if not myFarm then return false end
    
    local success = pcall(function()
        local plantsPhysical = myFarm.Important:FindFirstChild("Plants_Physical")
        if not plantsPhysical then return false end
        
        if StatusLabel then
            StatusLabel.Text = "üåæ Harvesting crops..."
        end
        
        if WarpPositions.Farm then
            SafeWarp(WarpPositions.Farm)
        end
        
        local harvestedCount = 0
        local targets = {}
        
        local function collectTargets(folder)
            for _, plant in pairs(folder:GetChildren()) do
                local fruits = plant:FindFirstChild("Fruits")
                if fruits then
                    collectTargets(fruits)
                end
                
                local prompt = plant:FindFirstChild("ProximityPrompt", true)
                if prompt and prompt.Enabled then
                    table.insert(targets, {plant = plant, prompt = prompt})
                end
            end
        end
        
        collectTargets(plantsPhysical)
        
        for _, target in pairs(targets) do
            if SafeGetCropCount() >= MAX_BACKPACK_SIZE or not AutoEnabled then 
                break 
            end
            
            local plant = target.plant
            local prompt = target.prompt
            
            local Character = LocalPlayer.Character
            if Character and Character:FindFirstChild("HumanoidRootPart") then
                local plantPos = plant:GetPivot().Position
                Character.HumanoidRootPart.CFrame = CFrame.new(plantPos + Vector3.new(0, 3, 0))
                task.wait(0.2)
            end
            
            if prompt.Enabled then
                local promptSuccess = pcall(function()
                    fireproximityprompt(prompt)
                end)
                
                if promptSuccess then
                    harvestedCount = harvestedCount + 1
                end
                task.wait(0.1)
            end
        end
        
        if StatusLabel then
            if harvestedCount > 0 then
                StatusLabel.Text = `‚úÖ Harvested {harvestedCount} crops`
            else
                StatusLabel.Text = "‚è≥ No crops ready"
            end
        end
    end)
    
    return success
end

local function SafeSmartSell()
    local cropCount = SafeGetCropCount()
    if cropCount < MIN_CROPS_TO_SELL then return false end
    
    local success = pcall(function()
        if StatusLabel then
            StatusLabel.Text = "üí∞ Selling crops..."
        end
        
        local previousMoney = ShecklesCount.Value
        SafeWarp(WarpPositions.Sell)
        
        local sellMethods = {
            "Sell_Inventory",
            "SellInventory", 
            "Sell",
            "SellCrops",
            "SellAll"
        }
        
        local attempts = 0
        local maxAttempts = 5
        
        while attempts < maxAttempts and SafeGetCropCount() > 0 and AutoEnabled do
            for _, method in pairs(sellMethods) do
                SafeFireRemote(method)
            end
            
            task.wait(0.5)
            attempts = attempts + 1
            
            if ShecklesCount.Value > previousMoney then
                break
            end
        end
        
        local profit = ShecklesCount.Value - previousMoney
        if StatusLabel then
            if profit > 0 then
                StatusLabel.Text = `üí∞ Sold! +$${profit}`
            else
                StatusLabel.Text = "‚ùå Sell failed"
            end
        end
        
        task.wait(1)
    end)
    
    return success
end

--// Safe Auto Loop with comprehensive error handling
local function SafeEnhancedAutoLoop()
    AutoLoopConnection = task.spawn(function()
        while AutoEnabled do
            local success, errorMsg = pcall(function()
                if not AutoEnabled then break end
                
                -- Check if essential components still exist
                if not ShecklesCount or not ShecklesCount.Parent then 
                    if StatusLabel then
                        StatusLabel.Text = "‚ùå Money stat lost!"
                    end
                    break 
                end
                
                local money = ShecklesCount.Value or 0
                local crops = SafeGetCropCount()
                local harvestableCrops = SafeGetHarvestableCrops()
                
                if InfoLabel then
                    InfoLabel.Text = `üí∞ ${money} | üì¶ ${crops} crops | üåæ ${harvestableCrops} ready`
                end
                
                -- Auto-farm sequence with error handling
                if AutoEnabled then
                    -- 1. Sell if needed
                    if (crops >= MAX_BACKPACK_SIZE or (harvestableCrops == 0 and crops >= MIN_CROPS_TO_SELL)) then
                        SafeSmartSell()
                        task.wait(2)
                    end
                    
                    -- 2. Buy seeds
                    if money >= 50 and AutoEnabled then
                        SafeBuySeeds()
                        task.wait(1)
                    end
                    
                    -- 3. Plant
                    if AutoEnabled then
                        SafeSmartPlant()
                        task.wait(2)
                    end
                    
                    -- 4. Harvest
                    if AutoEnabled then
                        SafeSmartHarvest()
                        task.wait(2)
                    end
                    
                    -- 5. Rest
                    if AutoEnabled then
                        if StatusLabel then
                            StatusLabel.Text = "‚è≥ Waiting..."
                        end
                        task.wait(3)
                    end
                end
            end)
            
            if not success then
                warn("‚ùå Auto-farm error: " .. tostring(errorMsg))
                if StatusLabel then
                    StatusLabel.Text = "‚ùå Error occurred, retrying..."
                end
                task.wait(2)
            end
        end
    end)
end

--// Safe Toggle Function
local function SafeToggleAuto()
    local success = pcall(function()
        AutoEnabled = not AutoEnabled
        
        if AutoEnabled then
            if ToggleButton then
                ToggleButton.Text = "üõë STOP AUTO"
                ToggleButton.BackgroundColor3 = Color3.fromRGB(244, 67, 54)
            end
            if StatusLabel then
                StatusLabel.Text = "üöÄ Enhanced auto-farm started!"
            end
            
            -- Stop old loop
            if AutoLoopConnection then
                task.cancel(AutoLoopConnection)
            end
            
            -- Start new loop
            SafeEnhancedAutoLoop()
        else
            if ToggleButton then
                ToggleButton.Text = "üöÄ START ENHANCED AUTO"
                ToggleButton.BackgroundColor3 = Color3.fromRGB(46, 125, 50)
            end
            if StatusLabel then
                StatusLabel.Text = "‚èπÔ∏è Auto-farm stopped!"
            end
            
            -- Stop loop
            if AutoLoopConnection then
                task.cancel(AutoLoopConnection)
                AutoLoopConnection = nil
            end
        end
    end)
    
    if not success then
        warn("‚ùå Failed to toggle auto-farm")
    end
end

--// Initialize everything safely
local function Initialize()
    -- Detect game structure first
    local detectionSuccess = SafeDetectGameStructure()
    
    if not detectionSuccess then
        if StatusLabel then
            StatusLabel.Text = "‚ùå Game structure not detected!"
        end
        return
    end
    
    -- Connect button
    if ToggleButton then
        ToggleButton.MouseButton1Click:Connect(SafeToggleAuto)
    end
    
    -- Status updater
    task.spawn(function()
        while task.wait(1) do
            local success = pcall(function()
                if not AutoEnabled and ShecklesCount and InfoLabel then
                    local money = ShecklesCount.Value or 0
                    local crops = SafeGetCropCount()
                    local harvestableCrops = SafeGetHarvestableCrops()
                    InfoLabel.Text = `üí∞ ${money} | üì¶ ${crops} crops | üåæ ${harvestableCrops} ready`
                elseif not ShecklesCount and InfoLabel then
                    InfoLabel.Text = "‚ùå Waiting for game to load..."
                end
            end)
            
            if not success then
                warn("‚ùå Status update error")
            end
        end
    end)
    
    print("üåü Enhanced Auto-Farm loaded successfully!")
    print("‚ú® All nil value errors fixed!")
    print("üéÆ Click the button to start enhanced farming!")
    print("üîß FULLY FIXED: Comprehensive error handling added!")
end

-- Initialize with delay
task.spawn(function()
    task.wait(2)
    Initialize()
end)
