--[[
    @author Enhanced Auto-Farm for Grow a Garden - PLAYER READY FIXED
    @description Fixed version with better player loading detection
    https://www.roblox.com/games/126884695634066
]]

-- Wait for game to load completely before doing anything
task.wait(3)

-- Check if we're in the right environment
if not game or not game.GetService then
    error("Script not running in proper Roblox environment")
    return
end

-- Safe service initialization with error handling
local function GetServiceSafely(serviceName)
    local success, service = pcall(function()
        return game:GetService(serviceName)
    end)
    
    if not success then
        warn(`Failed to get service: {serviceName}`)
        return nil
    end
    
    return service
end

-- Initialize services safely
local ReplicatedStorage = GetServiceSafely("ReplicatedStorage")
local Players = GetServiceSafely("Players")
local RunService = GetServiceSafely("RunService")
local TweenService = GetServiceSafely("TweenService")
local UserInputService = GetServiceSafely("UserInputService")

-- Validate essential services
if not ReplicatedStorage or not Players or not RunService then
    error("Essential services not available - game may not be loaded")
    return
end

local LocalPlayer = Players.LocalPlayer
if not LocalPlayer then
    error("LocalPlayer not found - script may be running too early")
    return
end

-- Simplified player ready function with better error handling
local function WaitForPlayerReady()
    print("‚è≥ Waiting for player to be ready...")
    
    -- Step 1: Wait for character with timeout
    print("1/4 Waiting for character...")
    local Character = LocalPlayer.Character
    local attempts = 0
    local maxAttempts = 30
    
    while not Character and attempts < maxAttempts do
        attempts = attempts + 1
        print(`Character attempt {attempts}/{maxAttempts}`)
        task.wait(1)
        Character = LocalPlayer.Character
    end
    
    if not Character then
        print("‚ùå Character not found, trying to spawn...")
        -- Try to respawn
        if LocalPlayer.CharacterAdded then
            Character = LocalPlayer.CharacterAdded:Wait()
        else
            error("Could not get character")
            return false
        end
    end
    
    print("‚úÖ Character found!")
    
    -- Step 2: Wait for essential character parts
    print("2/4 Waiting for character components...")
    local Humanoid = Character:WaitForChild("Humanoid", 15)
    local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart", 15)
    
    if not Humanoid then
        print("‚ö†Ô∏è Humanoid not found, continuing anyway...")
    else
        print("‚úÖ Humanoid found!")
    end
    
    if not HumanoidRootPart then
        print("‚ö†Ô∏è HumanoidRootPart not found, continuing anyway...")
    else
        print("‚úÖ HumanoidRootPart found!")
    end
    
    -- Step 3: Wait for backpack (optional)
    print("3/4 Checking backpack...")
    local Backpack = LocalPlayer:FindFirstChild("Backpack")
    if not Backpack then
        print("‚ö†Ô∏è Backpack not found, creating wait...")
        Backpack = LocalPlayer:WaitForChild("Backpack", 10)
    end
    
    if Backpack then
        print("‚úÖ Backpack found!")
    else
        print("‚ö†Ô∏è Backpack not found, continuing anyway...")
    end
    
    -- Step 4: Wait for leaderstats (most important for this game)
    print("4/4 Waiting for leaderstats...")
    local Leaderstats = LocalPlayer:FindFirstChild("leaderstats")
    attempts = 0
    maxAttempts = 20
    
    while not Leaderstats and attempts < maxAttempts do
        attempts = attempts + 1
        print(`Leaderstats attempt {attempts}/{maxAttempts}`)
        task.wait(1)
        Leaderstats = LocalPlayer:FindFirstChild("leaderstats")
    end
    
    if not Leaderstats then
        print("‚ùå Leaderstats not found - checking if we're in the right game...")
        print("Available PlayerGui children:")
        for _, child in pairs(LocalPlayer:GetChildren()) do
            print(`  - {child.Name} ({child.ClassName})`)
        end
        
        -- Try alternative locations for stats
        local PlayerGui = LocalPlayer:FindFirstChild("PlayerGui")
        if PlayerGui then
            print("Checking PlayerGui for stats...")
            for _, gui in pairs(PlayerGui:GetChildren()) do
                print(`  GUI: {gui.Name}`)
                for _, child in pairs(gui:GetChildren()) do
                    if child.Name:lower():find("money") or child.Name:lower():find("cash") or child.Name:lower():find("sheckle") then
                        print(`  Found potential money element: {child.Name}`)
                    end
                end
            end
        end
        
        error("Could not find leaderstats - make sure you're in the correct game")
        return false
    end
    
    print("‚úÖ Leaderstats found!")
    print("‚úÖ Player ready!")
    return true, Character, Backpack, Leaderstats
end

-- Initialize player components with better error handling
local playerReady, Character, Backpack, Leaderstats = WaitForPlayerReady()
if not playerReady then
    return
end

-- Find money stat with extensive search and better debugging
local function FindMoneyStat(leaderstats)
    print("üîç Searching for money stat...")
    
    local possibleNames = {
        "Sheckles", "Money", "Cash", "Coins", "Currency", 
        "Dollars", "Gold", "Credits", "Points", "Funds", "Sheckle"
    }
    
    -- First try exact matches
    for _, name in pairs(possibleNames) do
        local stat = leaderstats:FindFirstChild(name)
        if stat then
            print(`üí∞ Found exact match: {name} = {stat.Value}`)
            return stat
        end
    end
    
    -- Then try partial matches
    for _, child in pairs(leaderstats:GetChildren()) do
        local childName = child.Name:lower()
        for _, possibleName in pairs(possibleNames) do
            if childName:find(possibleName:lower()) then
                print(`üí∞ Found partial match: {child.Name} = {child.Value}`)
                return child
            end
        end
    end
    
    -- If still not found, show all available stats
    print("‚ùå Money stat not found. Available leaderstats:")
    for _, child in pairs(leaderstats:GetChildren()) do
        print(`  - {child.Name} ({child.ClassName}) = {child.Value}`)
    end
    
    -- Try to use the first IntValue or NumberValue as money
    for _, child in pairs(leaderstats:GetChildren()) do
        if child:IsA("IntValue") or child:IsA("NumberValue") then
            print(`üí∞ Using first numeric value as money: {child.Name}`)
            return child
        end
    end
    
    return nil
end

local ShecklesCount = FindMoneyStat(Leaderstats)
if not ShecklesCount then
    error("Could not find any money stat in leaderstats")
    return
end

-- Game structure detection with more patience
local GameEvents = nil
local Farms = nil

local function DetectGameStructure()
    print("üîç Detecting game structure...")
    
    local maxAttempts = 10
    local currentAttempt = 0
    
    while currentAttempt < maxAttempts and (not GameEvents or not Farms) do
        currentAttempt = currentAttempt + 1
        print(`Structure detection attempt {currentAttempt}/{maxAttempts}`)
        
        -- Look for events folder with more patience
        if not GameEvents then
            local eventFolders = {"GameEvents", "Events", "Remotes", "RemoteEvents", "ServerEvents", "RE"}
            for _, folderName in pairs(eventFolders) do
                local folder = ReplicatedStorage:FindFirstChild(folderName)
                if folder then
                    GameEvents = folder
                    print(`üìÅ Found events folder: {folderName}`)
                    break
                end
            end
            
            -- Also check ReplicatedStorage children
            if not GameEvents then
                print("Checking ReplicatedStorage children:")
                for _, child in pairs(ReplicatedStorage:GetChildren()) do
                    print(`  - {child.Name} ({child.ClassName})`)
                    if child:IsA("Folder") and (child.Name:lower():find("event") or child.Name:lower():find("remote")) then
                        GameEvents = child
                        print(`üìÅ Found events folder by pattern: {child.Name}`)
                        break
                    end
                end
            end
        end
        
        -- Look for farms folder
        if not Farms then
            local farmFolders = {"Farm", "Farms", "FarmPlots", "PlayerFarms", "Plots", "FarmFolder"}
            for _, folderName in pairs(farmFolders) do
                local folder = game.Workspace:FindFirstChild(folderName)
                if folder then
                    Farms = folder
                    print(`üåæ Found farms folder: {folderName}`)
                    break
                end
            end
            
            -- Also check workspace children
            if not Farms then
                print("Checking Workspace children for farms:")
                for _, child in pairs(game.Workspace:GetChildren()) do
                    if child:IsA("Folder") and child.Name:lower():find("farm") then
                        Farms = child
                        print(`üåæ Found farms folder by pattern: {child.Name}`)
                        break
                    end
                end
            end
        end
        
        if not GameEvents or not Farms then
            print("Waiting for more game components to load...")
            task.wait(3)
        end
    end
    
    if GameEvents then
        print("üìã Available events:")
        for _, event in pairs(GameEvents:GetChildren()) do
            print(`  - {event.Name} ({event.ClassName})`)
        end
    else
        print("‚ùå No events folder found!")
        print("üìã ReplicatedStorage children:")
        for _, child in pairs(ReplicatedStorage:GetChildren()) do
            print(`  - {child.Name} ({child.ClassName})`)
        end
    end
    
    if Farms then
        print("üìã Farms folder found with children:")
        for i, farm in pairs(Farms:GetChildren()) do
            if i <= 3 then -- Only show first 3
                print(`  - {farm.Name} ({farm.ClassName})`)
            end
        end
    else
        print("‚ùå No farms folder found!")
    end
    
    return GameEvents ~= nil and Farms ~= nil
end

-- Detect game structure
local detectionSuccess = DetectGameStructure()
if not detectionSuccess then
    print("‚ö†Ô∏è Could not detect full game structure - script will continue with limited functionality")
end

-- Seed progression system
local SeedProgression = {
    {name = "Carrot", price = 5, unlock = 0},
    {name = "Tomato", price = 25, unlock = 500},
    {name = "Potato", price = 40, unlock = 1000},
    {name = "Watermelon", price = 80, unlock = 2500},
    {name = "Pumpkin", price = 150, unlock = 5000},
    {name = "Blueberry", price = 300, unlock = 10000},
}

-- Global variables
local AutoEnabled = false
local AutoLoopConnection = nil

-- GUI Creation with error handling
local function CreateSimpleGUI()
    local success, gui = pcall(function()
        -- Remove any existing GUI
        local existingGui = game.CoreGui:FindFirstChild("SimpleAutoFarmGUI")
        if existingGui then
            existingGui:Destroy()
        end
        
        local ScreenGui = Instance.new("ScreenGui")
        ScreenGui.Name = "SimpleAutoFarmGUI"
        ScreenGui.Parent = game.CoreGui
        
        local MainFrame = Instance.new("Frame")
        MainFrame.Size = UDim2.new(0, 250, 0, 120)
        MainFrame.Position = UDim2.new(0, 10, 0, 10)
        MainFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        MainFrame.BorderSizePixel = 0
        MainFrame.Parent = ScreenGui
        
        -- Add rounded corners
        local Corner = Instance.new("UICorner")
        Corner.CornerRadius = UDim.new(0, 8)
        Corner.Parent = MainFrame
        
        local ToggleButton = Instance.new("TextButton")
        ToggleButton.Size = UDim2.new(1, -10, 0, 30)
        ToggleButton.Position = UDim2.new(0, 5, 0, 5)
        ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
        ToggleButton.Text = "START AUTO FARM"
        ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        ToggleButton.TextScaled = true
        ToggleButton.Font = Enum.Font.GothamBold
        ToggleButton.Parent = MainFrame
        
        local ButtonCorner = Instance.new("UICorner")
        ButtonCorner.CornerRadius = UDim.new(0, 5)
        ButtonCorner.Parent = ToggleButton
        
        local StatusLabel = Instance.new("TextLabel")
        StatusLabel.Size = UDim2.new(1, -10, 0, 20)
        StatusLabel.Position = UDim2.new(0, 5, 0, 40)
        StatusLabel.BackgroundTransparency = 1
        StatusLabel.Text = "‚úÖ Ready to farm!"
        StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        StatusLabel.TextScaled = true
        StatusLabel.Font = Enum.Font.Gotham
        StatusLabel.Parent = MainFrame
        
        local InfoLabel = Instance.new("TextLabel")
        InfoLabel.Size = UDim2.new(1, -10, 0, 20)
        InfoLabel.Position = UDim2.new(0, 5, 0, 65)
        InfoLabel.BackgroundTransparency = 1
        InfoLabel.Text = `üí∞ Money: $${ShecklesCount.Value}`
        InfoLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
        InfoLabel.TextScaled = true
        InfoLabel.Font = Enum.Font.Gotham
        InfoLabel.Parent = MainFrame
        
        local DebugLabel = Instance.new("TextLabel")
        DebugLabel.Size = UDim2.new(1, -10, 0, 20)
        DebugLabel.Position = UDim2.new(0, 5, 0, 90)
        DebugLabel.BackgroundTransparency = 1
        DebugLabel.Text = "üîß Script loaded successfully"
        DebugLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
        DebugLabel.TextScaled = true
        DebugLabel.Font = Enum.Font.Gotham
        DebugLabel.Parent = MainFrame
        
        return ScreenGui, ToggleButton, StatusLabel, InfoLabel, DebugLabel
    end)
    
    if success then
        return gui
    else
        warn("Failed to create GUI: " .. tostring(gui))
        return nil
    end
end

local ScreenGui, ToggleButton, StatusLabel, InfoLabel, DebugLabel = CreateSimpleGUI()
if not ScreenGui then
    error("Could not create GUI")
    return
end

-- Simple utility functions
local function GetBestSeed()
    if not ShecklesCount or not ShecklesCount.Value then
        return "Carrot"
    end
    
    local money = ShecklesCount.Value
    local bestSeed = "Carrot"
    
    for i = #SeedProgression, 1, -1 do
        local seed = SeedProgression[i]
        if money >= seed.unlock then
            bestSeed = seed.name
            break
        end
    end
    
    return bestSeed
end

local function SafeWarp(position)
    local success = pcall(function()
        local Character = LocalPlayer.Character
        if Character and Character:FindFirstChild("HumanoidRootPart") then
            Character.HumanoidRootPart.CFrame = position
        end
    end)
    return success
end

local function GetMyFarm()
    if not Farms then return nil end
    
    local success, farm = pcall(function()
        for _, Farm in pairs(Farms:GetChildren()) do
            local Important = Farm:FindFirstChild("Important")
            if Important then
                local Data = Important:FindFirstChild("Data")
                if Data then
                    local Owner = Data:FindFirstChild("Owner")
                    if Owner and Owner.Value == LocalPlayer.Name then
                        return Farm
                    end
                end
            end
        end
        return nil
    end)
    
    return success and farm or nil
end

-- Simple auto-farm functions
local function BuySeeds()
    if not GameEvents or not ShecklesCount then return end
    
    local success = pcall(function()
        local bestSeed = GetBestSeed()
        local buyEvents = {"BuySeedStock", "BuySeed", "BuySeeds", "PurchaseSeed"}
        
        for _, eventName in pairs(buyEvents) do
            local event = GameEvents:FindFirstChild(eventName)
            if event and event:IsA("RemoteEvent") then
                event:FireServer(bestSeed)
                break
            end
        end
    end)
    
    if success then
        StatusLabel.Text = "üõí Bought seeds"
    else
        StatusLabel.Text = "‚ùå Buy failed"
    end
end

local function PlantSeeds()
    local myFarm = GetMyFarm()
    if not myFarm or not GameEvents then return end
    
    local success = pcall(function()
        local plantEvents = {"Plant_RE", "PlantSeed", "Plant"}
        local bestSeed = GetBestSeed()
        
        -- Try to plant at farm center
        local farmCenter = myFarm:GetPivot()
        local plantPosition = Vector3.new(farmCenter.X, 0.13, farmCenter.Z)
        
        for _, eventName in pairs(plantEvents) do
            local event = GameEvents:FindFirstChild(eventName)
            if event and event:IsA("RemoteEvent") then
                event:FireServer(plantPosition, bestSeed)
                break
            end
        end
    end)
    
    if success then
        StatusLabel.Text = "üå± Planted seeds"
    else
        StatusLabel.Text = "‚ùå Plant failed"
    end
end

local function HarvestCrops()
    local myFarm = GetMyFarm()
    if not myFarm then return end
    
    local success = pcall(function()
        local plantsPhysical = myFarm.Important:FindFirstChild("Plants_Physical")
        if not plantsPhysical then return end
        
        local harvested = 0
        local function harvestInFolder(folder)
            for _, plant in pairs(folder:GetChildren()) do
                local prompt = plant:FindFirstChild("ProximityPrompt", true)
                if prompt and prompt.Enabled then
                    fireproximityprompt(prompt)
                    harvested = harvested + 1
                    task.wait(0.1)
                end
                
                local fruits = plant:FindFirstChild("Fruits")
                if fruits then
                    harvestInFolder(fruits)
                end
            end
        end
        
        harvestInFolder(plantsPhysical)
        StatusLabel.Text = `üåæ Harvested {harvested} crops`
    end)
    
    if not success then
        StatusLabel.Text = "‚ùå Harvest failed"
    end
end

local function SellCrops()
    if not GameEvents then return end
    
    local success = pcall(function()
        SafeWarp(CFrame.new(62, 4, -26)) -- Sell area position
        task.wait(1)
        
        local sellEvents = {"Sell_Inventory", "SellInventory", "Sell", "SellCrops", "SellAll"}
        
        for _, eventName in pairs(sellEvents) do
            local event = GameEvents:FindFirstChild(eventName)
            if event and event:IsA("RemoteEvent") then
                event:FireServer()
                break
            end
        end
    end)
    
    if success then
        StatusLabel.Text = "üí∞ Sold crops"
    else
        StatusLabel.Text = "‚ùå Sell failed"
    end
end

-- Simple auto-farm loop
local function AutoFarmLoop()
    AutoLoopConnection = task.spawn(function()
        while AutoEnabled do
            local success = pcall(function()
                -- Update info
                if ShecklesCount and InfoLabel then
                    InfoLabel.Text = `üí∞ Money: $${ShecklesCount.Value}`
                end
                
                if DebugLabel then
                    DebugLabel.Text = `üîß Seed: {GetBestSeed()}`
                end
                
                -- Farm sequence
                if AutoEnabled then
                    BuySeeds()
                    task.wait(2)
                end
                
                if AutoEnabled then
                    PlantSeeds()
                    task.wait(2)
                end
                
                if AutoEnabled then
                    HarvestCrops()
                    task.wait(2)
                end
                
                if AutoEnabled then
                    SellCrops()
                    task.wait(3)
                end
            end)
            
            if not success then
                StatusLabel.Text = "‚ùå Error occurred"
                task.wait(2)
            end
        end
    end)
end

-- Toggle function
local function ToggleAutoFarm()
    AutoEnabled = not AutoEnabled
    
    if AutoEnabled then
        ToggleButton.Text = "STOP AUTO FARM"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
        StatusLabel.Text = "üöÄ Auto-farm started"
        
        if AutoLoopConnection then
            task.cancel(AutoLoopConnection)
        end
        AutoFarmLoop()
    else
        ToggleButton.Text = "START AUTO FARM"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
        StatusLabel.Text = "‚èπÔ∏è Auto-farm stopped"
        
        if AutoLoopConnection then
            task.cancel(AutoLoopConnection)
            AutoLoopConnection = nil
        end
    end
end

-- Connect the button
if ToggleButton then
    ToggleButton.MouseButton1Click:Connect(function()
        local success = pcall(ToggleAutoFarm)
        if not success then
            warn("Failed to toggle auto-farm")
        end
    end)
end

-- Success message
print("üåü Enhanced Auto-Farm loaded successfully!")
print("üîß Player ready issue fixed!")
print("üéÆ Click the button to start farming!")
print(`üí∞ Current money: ${ShecklesCount.Value}`)
print(`üå± Best seed: {GetBestSeed()}`)

-- Keep the script alive and update display
while true do
    task.wait(2)
    
    -- Update money display
    if ShecklesCount and InfoLabel and not AutoEnabled then
        local success = pcall(function()
            InfoLabel.Text = `üí∞ Money: $${ShecklesCount.Value}`
        end)
    end
    
    -- Update debug info
    if DebugLabel and not AutoEnabled then
        local success = pcall(function()
            DebugLabel.Text = `üîß Best seed: {GetBestSeed()}`
        end)
    end
end
