--[[
    @author Enhanced Auto-Farm for Grow a Garden
    @description From 0 to 300 Tomatoes, with fallback to Carrot and robust farm/harvest logic
]]

task.wait(3)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

if not LocalPlayer then return end
if not LocalPlayer.Character then LocalPlayer.CharacterAdded:Wait() end

-- Wait for leaderstats
local function WaitForLeaderstats()
    local stats, tries = LocalPlayer:FindFirstChild("leaderstats"), 0
    while not stats and tries < 30 do
        stats = LocalPlayer:FindFirstChild("leaderstats")
        tries += 1
        task.wait(1)
    end
    return stats
end

local Leaderstats = WaitForLeaderstats()
if not Leaderstats then return print("‚ùå No leaderstats") end

local Sheckles = Leaderstats:FindFirstChild("Sheckles") or Leaderstats:FindFirstChild("Money")
if not Sheckles then return print("‚ùå No Sheckles or Money") end

-- GameEvents
local GameEvents
for _, name in {"GameEvents", "Events", "Remotes", "RE", "ServerEvents"} do
    local g = ReplicatedStorage:FindFirstChild(name)
    if g then GameEvents = g break end
end
if not GameEvents then return print("‚ùå GameEvents not found") end

-- Get my farm
local function GetMyFarm()
    for _, v in Workspace:GetDescendants() do
        if v:FindFirstChild("Important") and v.Important:FindFirstChild("Data") then
            local owner = v.Important.Data:FindFirstChild("Owner")
            if owner and owner.Value == LocalPlayer.Name then
                return v
            end
        end
    end
end

local function WaitForMyFarm(timeout)
    timeout = timeout or 20
    local t = 0
    while t < timeout do
        local f = GetMyFarm()
        if f then return f end
        task.wait(1)
        t += 1
    end
    return nil
end

-- Try buy seed
local function TryBuySeed(seedName)
    local bought = false
    for _, evt in {"BuySeed", "BuySeedStock", "BuySeeds", "PurchaseSeed"} do
        local event = GameEvents:FindFirstChild(evt)
        if event then
            for i = 1, 5 do  -- ‡∏•‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ï‡∏¥‡∏î‡πÜ ‡∏Å‡∏±‡∏ô 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ seed ‡πÄ‡∏¢‡∏≠‡∏∞
                local success = pcall(function()
                    event:FireServer(seedName)
                end)
                task.wait(0.05)
                if success then bought = true end
            end
        end
    end
    return bought
end

-- Equip tool function
local function EquipTool(seedName)
    local char = LocalPlayer.Character
    local humanoid = char and char:FindFirstChildOfClass("Humanoid")
    if not humanoid then return false end

    local tool = LocalPlayer.Backpack:FindFirstChild(seedName)
    if tool and tool.Parent ~= char then
        humanoid:EquipTool(tool)
        task.wait(0.2) -- ‡∏£‡∏≠ Equip ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢
        return true
    elseif tool and tool.Parent == char then
        return true
    else
        return false
    end
end

-- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Crops ‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤
local function GetCropCount()
    local char = LocalPlayer.Character
    local count = 0
    if not char then return 0 end

    local function countTools(parent)
        for _, item in pairs(parent:GetChildren()) do
            if item:IsA("Tool") and item:FindFirstChild("Item_String") then
                count += 1
            end
        end
    end

    countTools(LocalPlayer.Backpack)
    countTools(char)

    return count
end

-- Planting seeds (‡∏õ‡∏•‡∏π‡∏Å‡∏ó‡∏µ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡πÇ‡∏î‡∏¢ Equip ‡∏Å‡πà‡∏≠‡∏ô)
local function PlantSeed(seedName)
    local farm = WaitForMyFarm()
    if not farm then return end

    local locations = farm.Important:FindFirstChild("Plant_Locations")
    if not locations then return end

    local char = LocalPlayer.Character
    local hrp = char and char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    if not EquipTool(seedName) then
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏•‡πá‡∏î‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤: " .. seedName)
        return
    end

    -- ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÑ‡∏õ‡∏Å‡∏•‡∏≤‡∏á‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏•‡∏π‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    local middle = farm:GetPivot().Position + Vector3.new(0, 2, 0)
    hrp.CFrame = CFrame.new(middle)
    task.wait(0.1)

    local planted = 0
    for _, part in pairs(locations:GetChildren()) do
        local pos = part.Position + Vector3.new(0, 0.13, 0)
        for _, evt in {"PlantSeed", "Plant", "Plant_RE"} do
            local event = GameEvents:FindFirstChild(evt)
            if event then
                event:FireServer(pos, seedName)
                planted += 1
                task.wait(0.05) -- ‡∏õ‡∏•‡∏π‡∏Å‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
                break
            end
        end
        if planted >= 20 then break end -- ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏ö
    end
end

-- Harvest
local function Harvest()
    local farm = WaitForMyFarm()
    if not farm then return end
    local plants = farm.Important:FindFirstChild("Plants_Physical")
    if not plants then return end

    local char = LocalPlayer.Character
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    local harvested = 0

    for _, crop in pairs(plants:GetChildren()) do
        local prompt = crop:FindFirstChildWhichIsA("ProximityPrompt", true)
        if prompt and prompt.Enabled then
            local cropPos = crop:GetPivot().Position
            local dist = (hrp.Position - cropPos).Magnitude

            if dist > 9 then
                hrp.CFrame = CFrame.new(cropPos + Vector3.new(0, 2, 0))
                task.wait(0.2)
            end

            pcall(function()
                fireproximityprompt(prompt)
            end)

            harvested += 1
            task.wait(0.1)
        end
    end

    print("üåæ Harvested: " .. harvested)
end

-- Sell
local function Sell()
    local sellPos = CFrame.new(62, 4, -26)
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character.HumanoidRootPart.CFrame = sellPos
        task.wait(0.25)
    end

    for _, e in {"SellInventory", "Sell_Inventory", "Sell"} do
        local evt = GameEvents:FindFirstChild(e)
        if evt then evt:FireServer() break end
    end
end

-- Count tomatoes
local function CountTomatoes()
    local farm = WaitForMyFarm()
    if not farm then return 0 end
    local count, physical = 0, farm.Important:FindFirstChild("Plants_Physical")
    if physical then
        for _, crop in pairs(physical:GetChildren()) do
            if crop.Name == "Tomato" then count += 1 end
        end
    end
    return count
end

-- Main loop
local function FarmToTomato300()
    print("üöÄ Starting Auto-Farm to 300 Tomatoes...")
    while true do
        local tomatoes = CountTomatoes()
        print("üçÖ Tomato Count: " .. tomatoes)
        if tomatoes >= 300 then
            print("‚úÖ Reached 300 Tomato plants!")
            break
        end

        -- ‡∏ñ‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏ï‡πá‡∏° (> 20) ‡πÉ‡∏´‡πâ‡∏Ç‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô
        local cropCount = GetCropCount()
        if cropCount >= 20 then
            print("üì¶ ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏ï‡πá‡∏°! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏¢...")
            Sell()
            task.wait(0.3)
            continue
        end

        local seedToUse = "Tomato"
        if Sheckles.Value < 30 or not TryBuySeed("Tomato") then
            print("üîÑ Tomato unavailable or low money, using Carrot...")
            seedToUse = "Carrot"
            TryBuySeed("Carrot")
        end

        PlantSeed(seedToUse)
        task.wait(0.2)
        Harvest()
        task.wait(0.2)
        Sell()
        task.wait(0.3)
    end
end

-- Start farming
FarmToTomato300()
