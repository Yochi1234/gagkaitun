--[[
    @author Enhanced Auto-Farm for Grow a Garden
    @description From 0 to 300 Tomatoes, with fallback to Carrot and robust farm/harvest logic
]]

task.wait(3)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

if not LocalPlayer then return end
if not LocalPlayer.Character then LocalPlayer.CharacterAdded:Wait() end

-- Wait for leaderstats
local function WaitForLeaderstats()
    local stats, tries = LocalPlayer:FindFirstChild("leaderstats"), 0
    while not stats and tries < 30 do
        stats = LocalPlayer:FindFirstChild("leaderstats")
        tries += 1
        task.wait(1)
    end
    return stats
end

local Leaderstats = WaitForLeaderstats()
if not Leaderstats then return print("❌ No leaderstats") end

local Sheckles = Leaderstats:FindFirstChild("Sheckles") or Leaderstats:FindFirstChild("Money")
if not Sheckles then return print("❌ No Sheckles or Money") end

-- GameEvents
local GameEvents
for _, name in {"GameEvents", "Events", "Remotes", "RE", "ServerEvents"} do
    local g = ReplicatedStorage:FindFirstChild(name)
    if g then GameEvents = g break end
end
if not GameEvents then return print("❌ GameEvents not found") end

-- Get my farm
local function GetMyFarm()
    for _, v in Workspace:GetDescendants() do
        if v:FindFirstChild("Important") and v:FindFirstChild("Important"):FindFirstChild("Data") then
            local owner = v.Important.Data:FindFirstChild("Owner")
            if owner and owner.Value == LocalPlayer.Name then
                return v
            end
        end
    end
end

local function WaitForMyFarm(timeout)
    timeout = timeout or 20
    local t = 0
    while t < timeout do
        local f = GetMyFarm()
        if f then return f end
        task.wait(1)
        t += 1
    end
    return nil
end

-- Try buy seed
local function TryBuySeed(seed)
    for _, e in {"BuySeedStock", "BuySeed", "BuySeeds"} do
        local evt = GameEvents:FindFirstChild(e)
        if evt then
            local ok = pcall(function() evt:FireServer(seed) end)
            if ok then return true end
        end
    end
    return false
end

-- Planting
local function PlantSeed(seed)
    local farm = WaitForMyFarm()
    if not farm then return end
    local base = farm.Important:FindFirstChild("Plant_Locations")
    if not base then return end
    local land = base:GetChildren()[1]
    if not land then return end

    local pos = land.Position + Vector3.new(0, 0.1, 0)
    for _, e in {"Plant_RE", "Plant", "PlantSeed"} do
        local evt = GameEvents:FindFirstChild(e)
        if evt then
            evt:FireServer(pos, seed)
            break
        end
    end
end

-- Harvest
local function Harvest()
    local farm = WaitForMyFarm()
    if not farm then return end
    local physical = farm.Important:FindFirstChild("Plants_Physical")
    if not physical then return end

    for _, crop in pairs(physical:GetChildren()) do
        local prompt = crop:FindFirstChildWhichIsA("ProximityPrompt", true)
        if prompt and prompt.Enabled then
            for _ = 1, 2 do
                pcall(function() fireproximityprompt(prompt) end)
                task.wait(0.05)
            end
        end
    end
end

-- Sell
local function Sell()
    local sellPos = CFrame.new(62, 4, -26)
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character.HumanoidRootPart.CFrame = sellPos
        task.wait(0.25)
    end

    for _, e in {"SellInventory", "Sell_Inventory", "Sell"} do
        local evt = GameEvents:FindFirstChild(e)
        if evt then evt:FireServer() break end
    end
end

-- Count tomatoes
local function CountTomatoes()
    local farm = WaitForMyFarm()
    if not farm then return 0 end
    local count, physical = 0, farm.Important:FindFirstChild("Plants_Physical")
    if physical then
        for _, crop in pairs(physical:GetChildren()) do
            if crop.Name == "Tomato" then count += 1 end
        end
    end
    return count
end

-- Main loop
local function FarmTo300Tomatoes()
    print("🚀 Starting tomato farm to 300...")
    while true do
        local tomatoCount = CountTomatoes()
        print("🍅 Tomato count: " .. tomatoCount)
        if tomatoCount >= 300 then
            print("✅ Goal reached: 300 Tomatoes!")
            break
        end

        local seed = "Tomato"
        if Sheckles.Value < 35 or not TryBuySeed("Tomato") then
            seed = "Carrot"
            TryBuySeed("Carrot")
        end

        PlantSeed(seed)
        task.wait(0.05)
        Harvest()
        task.wait(0.05)
        Sell()
        task.wait(0.15)
    end
end

-- Start farming
FarmTo300Tomatoes()
