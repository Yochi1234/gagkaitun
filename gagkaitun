--[[
    @author Enhanced Auto-Farm for Grow a Garden - FIXED VERSION
    @description Smart auto-farm with improved error handling and button fix
    https://www.roblox.com/games/126884695634066
]]

--// Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer.Backpack
local PlayerGui = LocalPlayer.PlayerGui

-- Wait for leaderstats to load
local Leaderstats = LocalPlayer:WaitForChild("leaderstats", 10)
if not Leaderstats then
    warn("❌ Leaderstats not found! Game may not be fully loaded.")
    return
end

-- Find the money stat (different games use different names)
local ShecklesCount = Leaderstats:FindFirstChild("Sheckles") or 
                     Leaderstats:FindFirstChild("Money") or 
                     Leaderstats:FindFirstChild("Cash") or 
                     Leaderstats:FindFirstChild("Coins") or
                     Leaderstats:FindFirstChild("Currency")

if not ShecklesCount then
    warn("❌ Money stat not found in leaderstats!")
    print("📋 Available stats:")
    for _, stat in pairs(Leaderstats:GetChildren()) do
        print(`  - {stat.Name}`)
    end
    return
end

print(`💰 Found money stat: {ShecklesCount.Name}`)

--// Folders and Remotes Detection
local GameEvents = ReplicatedStorage:FindFirstChild("GameEvents") or ReplicatedStorage:FindFirstChild("Events") or ReplicatedStorage:FindFirstChild("Remotes")
local Farms = workspace:FindFirstChild("Farm") or workspace:FindFirstChild("Farms") or workspace:FindFirstChild("FarmPlots")

-- Auto-detect game structure for different versions
local function DetectGameStructure()
    print("🔍 Detecting game structure...")
    
    -- Wait for ReplicatedStorage to load
    wait(2)
    
    -- Check ReplicatedStorage structure
    local possibleEventFolders = {"GameEvents", "Events", "Remotes", "RemoteEvents"}
    for _, folderName in pairs(possibleEventFolders) do
        local folder = ReplicatedStorage:FindFirstChild(folderName)
        if folder then
            GameEvents = folder
            print(`📁 Found events folder: {folderName}`)
            break
        end
    end
    
    -- Check workspace farm structure  
    local possibleFarmFolders = {"Farm", "Farms", "FarmPlots", "PlayerFarms"}
    for _, folderName in pairs(possibleFarmFolders) do
        local folder = workspace:FindFirstChild(folderName)
        if folder then
            Farms = folder
            print(`🌾 Found farms folder: {folderName}`)
            break
        end
    end
    
    -- List available ReplicatedStorage children for debugging
    print("📋 ReplicatedStorage children:")
    for _, child in pairs(ReplicatedStorage:GetChildren()) do
        print(`  - {child.Name} ({child.ClassName})`)
    end
    
    -- List available Workspace children for debugging  
    print("📋 Workspace children:")
    for _, child in pairs(workspace:GetChildren()) do
        if child.Name:lower():find("farm") then
            print(`  - {child.Name} ({child.ClassName}) - FARM RELATED`)
        end
    end
    
    -- List available events for debugging
    if GameEvents then
        print("📋 Available GameEvents:")
        for _, child in pairs(GameEvents:GetChildren()) do
            print(`  - {child.Name} ({child.ClassName})`)
        end
    else
        print("❌ No GameEvents folder found!")
    end
end

-- Call detection on startup with delay
task.spawn(function()
    wait(3) -- รอให้เกมโหลดเสร็จ
    DetectGameStructure()
end)

--// Progression System
local SeedProgression = {
    {name = "Carrot", price = 5, unlock = 0},
    {name = "Corn", price = 15, unlock = 100},
    {name = "Tomato", price = 25, unlock = 500},
    {name = "Potato", price = 40, unlock = 1000},
    {name = "Watermelon", price = 80, unlock = 2500},
    {name = "Pumpkin", price = 150, unlock = 5000},
    {name = "Blueberry", price = 300, unlock = 10000},
}

--// Global Variables
local IsRunning = false
local AutoEnabled = false
local AutoLoopConnection = nil  -- เพิ่มตัวแปรนี้เพื่อควบคุม loop
local MAX_BACKPACK_SIZE = 20
local MIN_CROPS_TO_SELL = 3

--// Warp Positions
local WarpPositions = {
    Sell = CFrame.new(62, 4, -26),
    Shop = CFrame.new(0, 4, 0),
    Farm = nil
}

--// Enhanced GUI
local ScreenGui = Instance.new("ScreenGui")
local MainFrame = Instance.new("Frame")
local ToggleButton = Instance.new("TextButton")
local StatusLabel = Instance.new("TextLabel")
local InfoLabel = Instance.new("TextLabel")

ScreenGui.Name = "EnhancedAutoFarmGUI"
ScreenGui.Parent = game.CoreGui

MainFrame.Name = "MainFrame"
MainFrame.Parent = ScreenGui
MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
MainFrame.BorderSizePixel = 0
MainFrame.Position = UDim2.new(0, 10, 0, 10)
MainFrame.Size = UDim2.new(0, 220, 0, 130)

local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 10)
corner.Parent = MainFrame

-- Add shadow effect
local shadow = Instance.new("Frame")
shadow.Name = "Shadow"
shadow.Parent = ScreenGui
shadow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
shadow.BackgroundTransparency = 0.7
shadow.BorderSizePixel = 0
shadow.Position = UDim2.new(0, 12, 0, 12)
shadow.Size = UDim2.new(0, 220, 0, 130)
shadow.ZIndex = -1

local shadowCorner = Instance.new("UICorner")
shadowCorner.CornerRadius = UDim.new(0, 10)
shadowCorner.Parent = shadow

ToggleButton.Name = "ToggleButton"
ToggleButton.Parent = MainFrame
ToggleButton.BackgroundColor3 = Color3.fromRGB(46, 125, 50)
ToggleButton.Position = UDim2.new(0.05, 0, 0.15, 0)
ToggleButton.Size = UDim2.new(0.9, 0, 0.35, 0)
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.Text = "🚀 START ENHANCED AUTO"
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.TextScaled = true

local toggleCorner = Instance.new("UICorner")
toggleCorner.CornerRadius = UDim.new(0, 8)
toggleCorner.Parent = ToggleButton

StatusLabel.Name = "StatusLabel"
StatusLabel.Parent = MainFrame
StatusLabel.BackgroundTransparency = 1
StatusLabel.Position = UDim2.new(0.05, 0, 0.55, 0)
StatusLabel.Size = UDim2.new(0.9, 0, 0.2, 0)
StatusLabel.Font = Enum.Font.GothamMedium
StatusLabel.Text = "🌱 Ready to farm!"
StatusLabel.TextColor3 = Color3.fromRGB(76, 175, 80)
StatusLabel.TextScaled = true

InfoLabel.Name = "InfoLabel"
InfoLabel.Parent = MainFrame
InfoLabel.BackgroundTransparency = 1
InfoLabel.Position = UDim2.new(0.05, 0, 0.75, 0)
InfoLabel.Size = UDim2.new(0.9, 0, 0.2, 0)
InfoLabel.Font = Enum.Font.Gotham
InfoLabel.Text = "💰 $0 | 📦 0 crops"
InfoLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
InfoLabel.TextScaled = true

--// Enhanced Utility Functions
local function SmoothWarp(targetCFrame, speed)
    local Character = LocalPlayer.Character
    if not Character or not Character:FindFirstChild("HumanoidRootPart") then return end
    
    local HumanoidRootPart = Character.HumanoidRootPart
    HumanoidRootPart.CFrame = targetCFrame
    task.wait(0.2)  -- ใช้ task.wait แทน wait
end

local function GetBestSeed()
    if not ShecklesCount then return "Carrot" end
    
    local money = ShecklesCount.Value
    local bestSeed = "Carrot"
    
    for i = #SeedProgression, 1, -1 do
        local seed = SeedProgression[i]
        if money >= seed.unlock then
            bestSeed = seed.name
            break
        end
    end
    
    return bestSeed
end

local function GetMyFarm()
    if not Farms then return nil end
    
    for _, Farm in pairs(Farms:GetChildren()) do
        if Farm:FindFirstChild("Important") and Farm.Important:FindFirstChild("Data") then
            local Owner = Farm.Important.Data:FindFirstChild("Owner")
            if Owner and Owner.Value == LocalPlayer.Name then
                -- Set farm warp position
                WarpPositions.Farm = Farm:GetPivot() * CFrame.new(0, 5, 0)
                return Farm
            end
        end
    end
    return nil
end

local function GetOwnedSeeds()
    local seeds = {}
    local Character = LocalPlayer.Character
    
    for _, tool in pairs(Backpack:GetChildren()) do
        local plantName = tool:FindFirstChild("Plant_Name")
        local count = tool:FindFirstChild("Numbers")
        if plantName and count then
            seeds[plantName.Value] = {tool = tool, count = count.Value}
        end
    end
    
    if Character then
        for _, tool in pairs(Character:GetChildren()) do
            local plantName = tool:FindFirstChild("Plant_Name")
            local count = tool:FindFirstChild("Numbers")
            if plantName and count then
                seeds[plantName.Value] = {tool = tool, count = count.Value}
            end
        end
    end
    
    return seeds
end

local function GetCropCount()
    local count = 0
    local Character = LocalPlayer.Character
    
    for _, tool in pairs(Backpack:GetChildren()) do
        if tool:FindFirstChild("Item_String") then
            count = count + 1
        end
    end
    
    if Character then
        for _, tool in pairs(Character:GetChildren()) do
            if tool:FindFirstChild("Item_String") then
                count = count + 1
            end
        end
    end
    
    return count
end

local function GetHarvestableCrops()
    local myFarm = GetMyFarm()
    if not myFarm then return 0 end
    
    local plantsPhysical = myFarm.Important:FindFirstChild("Plants_Physical")
    if not plantsPhysical then return 0 end
    
    local count = 0
    local function countInFolder(folder)
        for _, plant in pairs(folder:GetChildren()) do
            local fruits = plant:FindFirstChild("Fruits")
            if fruits then
                countInFolder(fruits)
            end
            
            local prompt = plant:FindFirstChild("ProximityPrompt", true)
            if prompt and prompt.Enabled then
                count = count + 1
            end
        end
    end
    
    countInFolder(plantsPhysical)
    return count
end

local function IsBackpackFull()
    return GetCropCount() >= MAX_BACKPACK_SIZE
end

local function ShouldSell()
    local cropCount = GetCropCount()
    local harvestableCrops = GetHarvestableCrops()
    
    return IsBackpackFull() or (harvestableCrops == 0 and cropCount >= MIN_CROPS_TO_SELL)
end

--// Enhanced Main Functions
local function BuySeeds()
    if not GameEvents or not ShecklesCount then return false end
    
    local bestSeed = GetBestSeed()
    local money = ShecklesCount.Value
    local ownedSeeds = GetOwnedSeeds()
    local currentSeedCount = ownedSeeds[bestSeed] and ownedSeeds[bestSeed].count or 0
    
    if currentSeedCount < 10 then
        local seedData
        for _, seed in pairs(SeedProgression) do
            if seed.name == bestSeed then
                seedData = seed
                break
            end
        end
        
        if seedData and money >= seedData.price then
            StatusLabel.Text = "🛒 Buying seeds..."
            
            local buyMethods = {
                function() GameEvents.BuySeedStock:FireServer(bestSeed) end,
                function() GameEvents.BuySeed:FireServer(bestSeed) end,
                function() GameEvents.BuySeeds:FireServer(bestSeed) end,
                function() GameEvents.PurchaseSeed:FireServer(bestSeed) end,
                function() GameEvents.Shop:FireServer("BuySeed", bestSeed) end,
            }
            
            local success = false
            local initialMoney = money
            
            for i = 1, 5 do  -- ลดจำนวนการซื้อ
                for _, method in pairs(buyMethods) do
                    local methodSuccess = pcall(method)
                    if methodSuccess then
                        success = true
                        break
                    end
                    task.wait(0.1)
                end
                
                if ShecklesCount.Value < initialMoney then
                    success = true
                    break
                end
                task.wait(0.2)
            end
            
            if success then
                StatusLabel.Text = `✅ Bought seeds successfully`
            else
                StatusLabel.Text = `❌ Failed to buy seeds`
            end
            task.wait(1)
        end
    end
    return true
end

local function SmartPlant()
    local myFarm = GetMyFarm()
    if not myFarm then return false end
    
    local plantLocations = myFarm.Important:FindFirstChild("Plant_Locations")
    if not plantLocations then return false end
    
    local farmLands = plantLocations:GetChildren()
    if #farmLands == 0 then return false end
    
    local ownedSeeds = GetOwnedSeeds()
    local bestSeed = GetBestSeed()
    local seedData = ownedSeeds[bestSeed]
    
    if not seedData or seedData.count <= 0 then return false end
    
    StatusLabel.Text = "🌱 Smart planting..."
    
    if WarpPositions.Farm then
        SmoothWarp(WarpPositions.Farm)
    end
    
    local Character = LocalPlayer.Character
    if Character and seedData.tool.Parent == Backpack then
        Character.Humanoid:EquipTool(seedData.tool)
        task.wait(0.5)
    end
    
    local farmLand = farmLands[1]
    local center = farmLand:GetPivot()
    local plantCount = math.min(seedData.count, 8)  -- ลดจำนวนการปลูก
    
    if not GameEvents then return false end
    
    local plantMethods = {
        function(pos, seed) GameEvents.Plant_RE:FireServer(pos, seed) end,
        function(pos, seed) GameEvents.PlantSeed:FireServer(pos, seed) end,
        function(pos, seed) GameEvents.Plant:FireServer(pos, seed) end,
    }
    
    for i = 1, plantCount do
        if not AutoEnabled then break end  -- ตรวจสอบสถานะ Auto
        
        local x = center.X + math.random(-8, 8)
        local z = center.Z + math.random(-8, 8)
        local position = Vector3.new(x, 0.13, z)
        
        for _, method in pairs(plantMethods) do
            pcall(function()
                method(position, bestSeed)
            end)
        end
        task.wait(0.3)
    end
    
    StatusLabel.Text = `✅ Planted {plantCount} {bestSeed}`
    return true
end

local function SmartHarvest()
    local myFarm = GetMyFarm()
    if not myFarm then return false end
    
    local plantsPhysical = myFarm.Important:FindFirstChild("Plants_Physical")
    if not plantsPhysical then return false end
    
    StatusLabel.Text = "🌾 Harvesting crops..."
    
    if WarpPositions.Farm then
        SmoothWarp(WarpPositions.Farm)
    end
    
    local harvestedCount = 0
    local targets = {}
    
    local function collectTargets(folder)
        for _, plant in pairs(folder:GetChildren()) do
            local fruits = plant:FindFirstChild("Fruits")
            if fruits then
                collectTargets(fruits)
            end
            
            local prompt = plant:FindFirstChild("ProximityPrompt", true)
            if prompt and prompt.Enabled then
                table.insert(targets, {plant = plant, prompt = prompt})
            end
        end
    end
    
    collectTargets(plantsPhysical)
    
    for _, target in pairs(targets) do
        if IsBackpackFull() or not AutoEnabled then break end  -- ตรวจสอบสถานะ Auto
        
        local plant = target.plant
        local prompt = target.prompt
        
        local Character = LocalPlayer.Character
        if Character and Character:FindFirstChild("HumanoidRootPart") then
            local plantPos = plant:GetPivot().Position
            Character.HumanoidRootPart.CFrame = CFrame.new(plantPos + Vector3.new(0, 3, 0))
            task.wait(0.2)
        end
        
        if prompt.Enabled then
            fireproximityprompt(prompt)
            harvestedCount = harvestedCount + 1
            task.wait(0.1)
        end
    end
    
    if harvestedCount > 0 then
        StatusLabel.Text = `✅ Harvested {harvestedCount} crops`
    else
        StatusLabel.Text = "⏳ No crops ready"
    end
    return true
end

local function SmartSell()
    local cropCount = GetCropCount()
    if cropCount < MIN_CROPS_TO_SELL then return false end
    
    StatusLabel.Text = "💰 Selling crops..."
    
    local previousMoney = ShecklesCount.Value
    SmoothWarp(WarpPositions.Sell)
    
    if not GameEvents then return false end
    
    local sellMethods = {
        function() GameEvents.Sell_Inventory:FireServer() end,
        function() GameEvents.SellInventory:FireServer() end,
        function() GameEvents.Sell:FireServer() end,
        function() GameEvents.SellCrops:FireServer() end,
        function() GameEvents.SellAll:FireServer() end
    }
    
    local attempts = 0
    local maxAttempts = 10  -- ลดจำนวนความพยายาม
    
    while attempts < maxAttempts and GetCropCount() > 0 and AutoEnabled do
        for _, method in pairs(sellMethods) do
            pcall(method)
        end
        
        task.wait(0.5)
        attempts = attempts + 1
        
        if ShecklesCount.Value > previousMoney then
            break
        end
    end
    
    local profit = ShecklesCount.Value - previousMoney
    if profit > 0 then
        StatusLabel.Text = `💰 Sold! +$${profit}`
    else
        StatusLabel.Text = "❌ Sell failed"
    end
    
    task.wait(1)
    return true
end

--// FIXED Auto Loop
local function EnhancedAutoLoop()
    AutoLoopConnection = task.spawn(function()
        while AutoEnabled do
            local success = pcall(function()
                -- ตรวจสอบว่า AutoEnabled ยังเป็น true อยู่หรือไม่
                if not AutoEnabled then break end
                
                -- อัพเดทข้อมูล
                if not ShecklesCount then 
                    StatusLabel.Text = "❌ Money stat not found!"
                    break 
                end
                
                local money = ShecklesCount.Value
                local crops = GetCropCount()
                local harvestableCrops = GetHarvestableCrops()
                
                InfoLabel.Text = `💰 $${money} | 📦 ${crops} crops | 🌾 ${harvestableCrops} ready`
                
                -- 1. ขายก่อนถ้าจำเป็น
                if ShouldSell() and AutoEnabled then
                    SmartSell()
                    task.wait(2)
                end
                
                -- 2. ซื้อเมล็ดพันธุ์
                if money >= 50 and AutoEnabled then
                    BuySeeds()
                    task.wait(1)
                end
                
                -- 3. ปลูกพืช
                if AutoEnabled then
                    SmartPlant()
                    task.wait(2)
                end
                
                -- 4. เก็บเกี่ยว
                if AutoEnabled then
                    SmartHarvest()
                    task.wait(2)
                end
                
                -- 5. พักสั้นๆ
                if AutoEnabled then
                    StatusLabel.Text = "⏳ Waiting..."
                    task.wait(3)
                end
            end)
            
            if not success then
                StatusLabel.Text = "❌ Error occurred, retrying..."
                task.wait(2)
            end
        end
    end)
end

--// FIXED Button Functions
local function ToggleAuto()
    AutoEnabled = not AutoEnabled
    
    if AutoEnabled then
        ToggleButton.Text = "🛑 STOP AUTO"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(244, 67, 54)
        StatusLabel.Text = "🚀 Enhanced auto-farm started!"
        
        -- หยุด loop เก่าก่อน (ถ้ามี)
        if AutoLoopConnection then
            task.cancel(AutoLoopConnection)
        end
        
        -- เริ่ม loop ใหม่
        EnhancedAutoLoop()
    else
        ToggleButton.Text = "🚀 START ENHANCED AUTO"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(46, 125, 50)
        StatusLabel.Text = "⏹️ Auto-farm stopped!"
        
        -- หยุด loop
        if AutoLoopConnection then
            task.cancel(AutoLoopConnection)
            AutoLoopConnection = nil
        end
    end
end

--// Connect Events
ToggleButton.MouseButton1Click:Connect(ToggleAuto)

-- Draggable GUI
local dragging = false
local dragStart = nil
local startPos = nil

MainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
    end
end)

MainFrame.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        shadow.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X + 2, startPos.Y.Scale, startPos.Y.Offset + delta.Y + 2)
    end
end)

MainFrame.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)

-- Status updater
task.spawn(function()
    while task.wait(1) do
        if not AutoEnabled and ShecklesCount then
            local money = ShecklesCount.Value
            local crops = GetCropCount()
            local harvestableCrops = GetHarvestableCrops()
            InfoLabel.Text = `💰 ${money} | 📦 ${crops} crops | 🌾 ${harvestableCrops} ready`
        elseif not ShecklesCount then
            InfoLabel.Text = "❌ Waiting for game to load..."
        end
    end
end)

-- Remove auto-start for testing
print("🌟 Enhanced Auto-Farm loaded successfully!")
print("✨ Features: Smart warp, auto-sell when needed, improved planting!")
print("🎮 Click the button to start enhanced farming!")
print("🔧 FIXED: Button hanging issue resolved!")
print("⏳ Waiting for game to fully load...")

-- Show loading status
StatusLabel.Text = "⏳ Loading game data..."
InfoLabel.Text = "Please wait..."
