--[[  
    @author Enhanced Auto-Farm for Grow a Garden
    @description Smart farming: Start with Carrots ‚Üí Switch to Tomatoes when affordable ‚Üí Auto-equip seeds
]]

task.wait(3)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

if not LocalPlayer then return end
if not LocalPlayer.Character then LocalPlayer.CharacterAdded:Wait() end

-- Wait for leaderstats
local function WaitForLeaderstats()
    local stats, tries = LocalPlayer:FindFirstChild("leaderstats"), 0
    while not stats and tries < 30 do
        stats = LocalPlayer:FindFirstChild("leaderstats")
        tries += 1
        task.wait(0.5)
    end
    return stats
end

local Leaderstats = WaitForLeaderstats()
if not Leaderstats then return print("‚ùå No leaderstats") end

local Sheckles = Leaderstats:FindFirstChild("Sheckles") or Leaderstats:FindFirstChild("Money")
if not Sheckles then return print("‚ùå No Sheckles or Money") end

-- GameEvents
local GameEvents
for _, name in {"GameEvents", "Events", "Remotes", "RE", "ServerEvents"} do
    local g = ReplicatedStorage:FindFirstChild(name)
    if g then GameEvents = g break end
end
if not GameEvents then return print("‚ùå GameEvents not found") end

-- Get my farm
local function GetMyFarm()
    for _, v in Workspace:GetDescendants() do
        if v:FindFirstChild("Important") and v.Important:FindFirstChild("Data") then
            local owner = v.Important.Data:FindFirstChild("Owner")
            if owner and owner.Value == LocalPlayer.Name then
                return v
            end
        end
    end
end

local function WaitForMyFarm(timeout)
    timeout = timeout or 15
    local t = 0
    while t < timeout do
        local f = GetMyFarm()
        if f then return f end
        task.wait(0.5)
        t += 0.5
    end
    return nil
end

-- Safe farm center detection
local function GetFarmCenter(farm)
    if not farm then return Vector3.new(0, 4, 0) end
    
    if farm:IsA("Model") then
        local success, cframe = pcall(function()
            return farm:GetBoundingBox()
        end)
        if success and cframe then
            return cframe.Position
        end
    end
    
    if farm:IsA("Model") and farm.PrimaryPart then
        return farm.PrimaryPart.Position
    end
    
    for _, part in ipairs(farm:GetDescendants()) do
        if part:IsA("BasePart") then
            return part.Position
        end
    end
    
    local plantLocations = farm:FindFirstChild("Important") and farm.Important:FindFirstChild("Plant_Locations")
    if plantLocations then
        local positions = {}
        for _, location in pairs(plantLocations:GetChildren()) do
            if location:IsA("BasePart") then
                table.insert(positions, location.Position)
            end
        end
        if #positions > 0 then
            local avgX, avgY, avgZ = 0, 0, 0
            for _, pos in ipairs(positions) do
                avgX += pos.X
                avgY += pos.Y
                avgZ += pos.Z
            end
            return Vector3.new(avgX/#positions, avgY/#positions, avgZ/#positions)
        end
    end
    
    return Vector3.new(0, 4, 0)
end

-- Try buy seed
local function TryBuySeed(seedName)
    local bought = false
    for _, evt in {"BuySeed", "BuySeedStock", "BuySeeds", "PurchaseSeed"} do
        local event = GameEvents:FindFirstChild(evt)
        if event then
            for i = 1, 5 do
                local success = pcall(function()
                    event:FireServer(seedName)
                end)
                task.wait(0.05)
                if success then bought = true end
            end
        end
    end
    return bought
end

-- Count crops in inventory
local function GetCropCount()
    local char = LocalPlayer.Character
    local count = 0
    if not char then return 0 end
    
    local function countTools(parent)
        for _, item in pairs(parent:GetChildren()) do
            if item:IsA("Tool") and item:FindFirstChild("Item_String") then
                count += 1
            end
        end
    end
    
    countTools(LocalPlayer.Backpack)
    countTools(char)
    return count
end

-- Fast plant seed
local function PlantSeed(seedName)
    local farm = WaitForMyFarm()
    if not farm then return false end

    local locations = farm.Important:FindFirstChild("Plant_Locations")
    if not locations then return false end

    local char = LocalPlayer.Character
    local hrp = char and char:FindFirstChild("HumanoidRootPart")
    if not hrp then return false end

    local centerPos = GetFarmCenter(farm)
    hrp.CFrame = CFrame.new(centerPos + Vector3.new(0, 2, 0))
    task.wait(0.05)

    local planted = 0
    for _, part in pairs(locations:GetChildren()) do
        if part:IsA("BasePart") then
            local pos = part.Position + Vector3.new(0, 0.13, 0)
            
            -- Try multiple plant events
            for _, evt in {"PlantSeed", "Plant", "Plant_RE"} do
                local event = GameEvents:FindFirstChild(evt)
                if event then
                    pcall(function()
                        event:FireServer(pos, seedName)
                    end)
                    planted += 1
                    task.wait(0.01) -- Super fast planting
                    break
                end
            end
            if planted >= 25 then break end -- Plant more per cycle
        end
    end
    
    print("üå± ‡∏õ‡∏•‡∏π‡∏Å " .. planted .. " ‡πÄ‡∏°‡∏•‡πá‡∏î " .. seedName)
    return planted > 0
end

-- Fast harvest
local function Harvest()
    local farm = WaitForMyFarm()
    if not farm then return 0 end
    
    local plants = farm.Important:FindFirstChild("Plants_Physical")
    if not plants then return 0 end

    local char = LocalPlayer.Character
    if not char then return 0 end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return 0 end

    local harvested = 0
    local lastPos = hrp.Position

    for _, crop in pairs(plants:GetChildren()) do
        local prompt = crop:FindFirstChildWhichIsA("ProximityPrompt", true)
        if prompt and prompt.Enabled then
            local cropPos
            
            if crop:IsA("Model") and typeof(crop.GetPivot) == "function" then
                cropPos = crop:GetPivot().Position
            elseif crop:IsA("BasePart") then
                cropPos = crop.Position
            elseif crop:IsA("Model") and crop.PrimaryPart then
                cropPos = crop.PrimaryPart.Position
            else
                for _, part in pairs(crop:GetDescendants()) do
                    if part:IsA("BasePart") then
                        cropPos = part.Position
                        break
                    end
                end
            end

            if cropPos then
                if (lastPos - cropPos).Magnitude > 8 then
                    hrp.CFrame = CFrame.new(cropPos + Vector3.new(0, 1, 0))
                    lastPos = cropPos
                    task.wait(0.05)
                end

                pcall(function() fireproximityprompt(prompt) end)
                harvested += 1
                task.wait(0.01) -- Super fast harvesting
            end
        end
    end

    print("üåæ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß: " .. harvested .. " ‡∏ú‡∏•")
    return harvested
end

-- Sell inventory
local function Sell()
    local sellPos = CFrame.new(62, 4, -26)
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character.HumanoidRootPart.CFrame = sellPos
        task.wait(0.1)
    end

    for _, e in {"SellInventory", "Sell_Inventory", "Sell"} do
        local evt = GameEvents:FindFirstChild(e)
        if evt then 
            pcall(function() evt:FireServer() end)
            print("üí∞ ‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß - ‡πÄ‡∏á‡∏¥‡∏ô: " .. Sheckles.Value)
            break 
        end
    end
    task.wait(0.1)
end

-- Count tomatoes planted
local function CountTomatoes()
    local farm = WaitForMyFarm()
    if not farm then return 0 end
    local count, physical = 0, farm.Important:FindFirstChild("Plants_Physical")
    if physical then
        for _, crop in pairs(physical:GetChildren()) do
            if crop.Name == "Tomato" then count += 1 end
        end
    end
    return count
end

-- Smart seed selection
local function GetBestSeed()
    local money = Sheckles.Value
    local tomatoCost = 30 -- ‡∏£‡∏≤‡∏Ñ‡∏≤ Tomato
    local carrotCost = 10 -- ‡∏£‡∏≤‡∏Ñ‡∏≤ Carrot
    
    -- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏û‡∏≠‡∏ã‡∏∑‡πâ‡∏≠ Tomato 20 ‡∏ï‡πâ‡∏ô (600) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ Tomato
    if money >= (tomatoCost * 20) then
        return "Tomato"
    else
        return "Carrot"
    end
end

-- Main farming loop
local function SmartFarm()
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ Carrot ‚Üí Tomato ‚Üí ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ 300 ‡∏ï‡πâ‡∏ô")
    
    local targetTomatoes = 300
    local phase = "CARROT_PHASE" -- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ Carrot
    
    while true do
        local currentMoney = Sheckles.Value
        local tomatoCount = CountTomatoes()
        local cropCount = GetCropCount()
        
        print(string.format("üí∞ ‡πÄ‡∏á‡∏¥‡∏ô: %d | üçÖ ‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®: %d/%d | üì¶ ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤: %d", 
            currentMoney, tomatoCount, targetTomatoes, cropCount))
        
        -- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if tomatoCount >= targetTomatoes then
            print("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏õ‡∏•‡∏π‡∏Å‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®‡∏Ñ‡∏£‡∏ö " .. targetTomatoes .. " ‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
            break
        end
        
        -- ‡∏Ç‡∏≤‡∏¢‡∏ñ‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏ï‡πá‡∏°
        if cropCount >= 18 then
            print("üì¶ ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏ï‡πá‡∏°! ‡πÑ‡∏õ‡∏Ç‡∏≤‡∏¢...")
            Sell()
            task.wait(0.1)
            continue
        end
        
        -- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏•‡πá‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏•‡∏π‡∏Å
        local seedToUse
        if phase == "CARROT_PHASE" and currentMoney >= 600 then -- 30*20
            phase = "TOMATO_PHASE"
            print("üîÑ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®!")
        end
        
        if phase == "TOMATO_PHASE" then
            seedToUse = "Tomato"
            -- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏ã‡∏∑‡πâ‡∏≠ Tomato ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Carrot ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            if currentMoney < 30 then
                seedToUse = "Carrot"
                print("üí∏ ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡∏õ‡∏•‡∏π‡∏Å Carrot ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß")
            end
        else
            seedToUse = "Carrot"
        end
        
        -- ‡∏õ‡∏•‡∏π‡∏Å
        if PlantSeed(seedToUse) then
            task.wait(0.02)
        else
            -- ‡∏ñ‡πâ‡∏≤‡∏õ‡∏•‡∏π‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏•‡πá‡∏î‡∏Å‡πà‡∏≠‡∏ô
            TryBuySeed(seedToUse)
            task.wait(0.1)
        end
        
        -- ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß
        Harvest()
        task.wait(0.02)
        
        -- ‡∏Ç‡∏≤‡∏¢
        if cropCount > 0 then
            Sell()
        end
        
        task.wait(0.05) -- ‡∏£‡∏≠‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏ö
    end
end

-- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ü‡∏≤‡∏£‡πå‡∏°
SmartFarm()
