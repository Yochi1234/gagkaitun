--[[
    @author Enhanced Auto-Farm for Grow a Garden - LINE 1 ERROR FIXED
    @description Fixed version with proper initialization order
    https://www.roblox.com/games/126884695634066
]]

-- Wait for game to load completely before doing anything
task.wait(5)

-- Check if we're in the right environment
if not game or not game.GetService then
    error("Script not running in proper Roblox environment")
    return
end

-- Safe service initialization with error handling
local function GetServiceSafely(serviceName)
    local success, service = pcall(function()
        return game:GetService(serviceName)
    end)
    
    if not success then
        warn(`Failed to get service: {serviceName}`)
        return nil
    end
    
    return service
end

-- Initialize services safely
local ReplicatedStorage = GetServiceSafely("ReplicatedStorage")
local Players = GetServiceSafely("Players")
local RunService = GetServiceSafely("RunService")
local TweenService = GetServiceSafely("TweenService")
local UserInputService = GetServiceSafely("UserInputService")

-- Validate essential services
if not ReplicatedStorage or not Players or not RunService then
    error("Essential services not available - game may not be loaded")
    return
end

local LocalPlayer = Players.LocalPlayer
if not LocalPlayer then
    error("LocalPlayer not found - script may be running too early")
    return
end

-- Wait for player to fully load
local function WaitForPlayerReady()
    print("‚è≥ Waiting for player to be ready...")
    
    -- Wait for character
    local Character = LocalPlayer.CharacterAdded:Wait()
    local Humanoid = Character:WaitForChild("Humanoid", 10)
    local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart", 10)
    
    if not Humanoid or not HumanoidRootPart then
        error("Character components not loaded properly")
        return false
    end
    
    -- Wait for backpack
    local Backpack = LocalPlayer:WaitForChild("Backpack", 10)
    if not Backpack then
        error("Backpack not found")
        return false
    end
    
    -- Wait for leaderstats
    local Leaderstats = LocalPlayer:WaitForChild("leaderstats", 15)
    if not Leaderstats then
        error("Leaderstats not found - wrong game or not loaded")
        return false
    end
    
    print("‚úÖ Player ready!")
    return true, Character, Backpack, Leaderstats
end

-- Initialize player components
local playerReady, Character, Backpack, Leaderstats = WaitForPlayerReady()
if not playerReady then
    return
end

-- Find money stat with extensive search
local function FindMoneyStat(leaderstats)
    local possibleNames = {
        "Sheckles", "Money", "Cash", "Coins", "Currency", 
        "Dollars", "Gold", "Credits", "Points", "Funds"
    }
    
    for _, name in pairs(possibleNames) do
        local stat = leaderstats:FindFirstChild(name)
        if stat then
            print(`üí∞ Found money stat: {name}`)
            return stat
        end
    end
    
    -- If not found, list all available stats
    print("‚ùå Money stat not found. Available stats:")
    for _, child in pairs(leaderstats:GetChildren()) do
        print(`  - {child.Name} ({child.ClassName})`)
    end
    
    return nil
end

local ShecklesCount = FindMoneyStat(Leaderstats)
if not ShecklesCount then
    error("Could not find money stat in leaderstats")
    return
end

-- Game structure detection with multiple retries
local GameEvents = nil
local Farms = nil

local function DetectGameStructure()
    print("üîç Detecting game structure...")
    
    local maxAttempts = 5
    local currentAttempt = 0
    
    while currentAttempt < maxAttempts and (not GameEvents or not Farms) do
        currentAttempt = currentAttempt + 1
        print(`Attempt {currentAttempt}/{maxAttempts}`)
        
        -- Look for events folder
        if not GameEvents then
            local eventFolders = {"GameEvents", "Events", "Remotes", "RemoteEvents", "ServerEvents"}
            for _, folderName in pairs(eventFolders) do
                local folder = ReplicatedStorage:FindFirstChild(folderName)
                if folder then
                    GameEvents = folder
                    print(`üìÅ Found events: {folderName}`)
                    break
                end
            end
        end
        
        -- Look for farms folder
        if not Farms then
            local farmFolders = {"Farm", "Farms", "FarmPlots", "PlayerFarms", "Plots"}
            for _, folderName in pairs(farmFolders) do
                local folder = game.Workspace:FindFirstChild(folderName)
                if folder then
                    Farms = folder
                    print(`üåæ Found farms: {folderName}`)
                    break
                end
            end
        end
        
        if not GameEvents or not Farms then
            print("Waiting for game to load more...")
            task.wait(2)
        end
    end
    
    if GameEvents then
        print("Available events:")
        for _, event in pairs(GameEvents:GetChildren()) do
            print(`  - {event.Name}`)
        end
    else
        print("‚ùå No events folder found!")
    end
    
    return GameEvents ~= nil and Farms ~= nil
end

-- Detect game structure
local detectionSuccess = DetectGameStructure()
if not detectionSuccess then
    warn("‚ö†Ô∏è Could not detect full game structure - some features may not work")
end

-- Seed progression system
local SeedProgression = {
    {name = "Carrot", price = 5, unlock = 0},
    {name = "Corn", price = 15, unlock = 100},
    {name = "Tomato", price = 25, unlock = 500},
    {name = "Potato", price = 40, unlock = 1000},
    {name = "Watermelon", price = 80, unlock = 2500},
    {name = "Pumpkin", price = 150, unlock = 5000},
    {name = "Blueberry", price = 300, unlock = 10000},
}

-- Global variables
local AutoEnabled = false
local AutoLoopConnection = nil

-- GUI Creation with error handling
local function CreateSimpleGUI()
    local success, gui = pcall(function()
        -- Remove any existing GUI
        local existingGui = game.CoreGui:FindFirstChild("SimpleAutoFarmGUI")
        if existingGui then
            existingGui:Destroy()
        end
        
        local ScreenGui = Instance.new("ScreenGui")
        ScreenGui.Name = "SimpleAutoFarmGUI"
        ScreenGui.Parent = game.CoreGui
        
        local MainFrame = Instance.new("Frame")
        MainFrame.Size = UDim2.new(0, 200, 0, 100)
        MainFrame.Position = UDim2.new(0, 10, 0, 10)
        MainFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        MainFrame.Parent = ScreenGui
        
        local ToggleButton = Instance.new("TextButton")
        ToggleButton.Size = UDim2.new(1, -10, 0, 30)
        ToggleButton.Position = UDim2.new(0, 5, 0, 5)
        ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
        ToggleButton.Text = "START AUTO FARM"
        ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        ToggleButton.Parent = MainFrame
        
        local StatusLabel = Instance.new("TextLabel")
        StatusLabel.Size = UDim2.new(1, -10, 0, 20)
        StatusLabel.Position = UDim2.new(0, 5, 0, 40)
        StatusLabel.BackgroundTransparency = 1
        StatusLabel.Text = "Ready to farm!"
        StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        StatusLabel.TextScaled = true
        StatusLabel.Parent = MainFrame
        
        local InfoLabel = Instance.new("TextLabel")
        InfoLabel.Size = UDim2.new(1, -10, 0, 20)
        InfoLabel.Position = UDim2.new(0, 5, 0, 65)
        InfoLabel.BackgroundTransparency = 1
        InfoLabel.Text = "Money: $0"
        InfoLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
        InfoLabel.TextScaled = true
        InfoLabel.Parent = MainFrame
        
        return ScreenGui, ToggleButton, StatusLabel, InfoLabel
    end)
    
    if success then
        return gui
    else
        warn("Failed to create GUI: " .. tostring(gui))
        return nil
    end
end

local ScreenGui, ToggleButton, StatusLabel, InfoLabel = CreateSimpleGUI()
if not ScreenGui then
    error("Could not create GUI")
    return
end

-- Simple utility functions
local function GetBestSeed()
    if not ShecklesCount or not ShecklesCount.Value then
        return "Carrot"
    end
    
    local money = ShecklesCount.Value
    local bestSeed = "Carrot"
    
    for i = #SeedProgression, 1, -1 do
        local seed = SeedProgression[i]
        if money >= seed.unlock then
            bestSeed = seed.name
            break
        end
    end
    
    return bestSeed
end

local function SafeWarp(position)
    local success = pcall(function()
        local Character = LocalPlayer.Character
        if Character and Character:FindFirstChild("HumanoidRootPart") then
            Character.HumanoidRootPart.CFrame = position
        end
    end)
    return success
end

local function GetMyFarm()
    if not Farms then return nil end
    
    local success, farm = pcall(function()
        for _, Farm in pairs(Farms:GetChildren()) do
            local Important = Farm:FindFirstChild("Important")
            if Important then
                local Data = Important:FindFirstChild("Data")
                if Data then
                    local Owner = Data:FindFirstChild("Owner")
                    if Owner and Owner.Value == LocalPlayer.Name then
                        return Farm
                    end
                end
            end
        end
        return nil
    end)
    
    return success and farm or nil
end

-- Simple auto-farm functions
local function BuySeeds()
    if not GameEvents or not ShecklesCount then return end
    
    local success = pcall(function()
        local bestSeed = GetBestSeed()
        local buyEvents = {"BuySeedStock", "BuySeed", "BuySeeds", "PurchaseSeed"}
        
        for _, eventName in pairs(buyEvents) do
            local event = GameEvents:FindFirstChild(eventName)
            if event and event:IsA("RemoteEvent") then
                event:FireServer(bestSeed)
                break
            end
        end
    end)
    
    if success then
        StatusLabel.Text = "Bought seeds"
    else
        StatusLabel.Text = "Buy failed"
    end
end

local function PlantSeeds()
    local myFarm = GetMyFarm()
    if not myFarm or not GameEvents then return end
    
    local success = pcall(function()
        local plantEvents = {"Plant_RE", "PlantSeed", "Plant"}
        local bestSeed = GetBestSeed()
        
        -- Try to plant at farm center
        local farmCenter = myFarm:GetPivot()
        local plantPosition = Vector3.new(farmCenter.X, 0.13, farmCenter.Z)
        
        for _, eventName in pairs(plantEvents) do
            local event = GameEvents:FindFirstChild(eventName)
            if event and event:IsA("RemoteEvent") then
                event:FireServer(plantPosition, bestSeed)
                break
            end
        end
    end)
    
    if success then
        StatusLabel.Text = "Planted seeds"
    else
        StatusLabel.Text = "Plant failed"
    end
end

local function HarvestCrops()
    local myFarm = GetMyFarm()
    if not myFarm then return end
    
    local success = pcall(function()
        local plantsPhysical = myFarm.Important:FindFirstChild("Plants_Physical")
        if not plantsPhysical then return end
        
        local harvested = 0
        local function harvestInFolder(folder)
            for _, plant in pairs(folder:GetChildren()) do
                local prompt = plant:FindFirstChild("ProximityPrompt", true)
                if prompt and prompt.Enabled then
                    fireproximityprompt(prompt)
                    harvested = harvested + 1
                    task.wait(0.1)
                end
                
                local fruits = plant:FindFirstChild("Fruits")
                if fruits then
                    harvestInFolder(fruits)
                end
            end
        end
        
        harvestInFolder(plantsPhysical)
        StatusLabel.Text = `Harvested ${harvested} crops`
    end)
    
    if not success then
        StatusLabel.Text = "Harvest failed"
    end
end

local function SellCrops()
    if not GameEvents then return end
    
    local success = pcall(function()
        SafeWarp(CFrame.new(62, 4, -26)) -- Sell area position
        task.wait(1)
        
        local sellEvents = {"Sell_Inventory", "SellInventory", "Sell", "SellCrops", "SellAll"}
        
        for _, eventName in pairs(sellEvents) do
            local event = GameEvents:FindFirstChild(eventName)
            if event and event:IsA("RemoteEvent") then
                event:FireServer()
                break
            end
        end
    end)
    
    if success then
        StatusLabel.Text = "Sold crops"
    else
        StatusLabel.Text = "Sell failed"
    end
end

-- Simple auto-farm loop
local function AutoFarmLoop()
    AutoLoopConnection = task.spawn(function()
        while AutoEnabled do
            local success = pcall(function()
                -- Update info
                if ShecklesCount and InfoLabel then
                    InfoLabel.Text = `Money: $${ShecklesCount.Value}`
                end
                
                -- Farm sequence
                if AutoEnabled then
                    BuySeeds()
                    task.wait(2)
                end
                
                if AutoEnabled then
                    PlantSeeds()
                    task.wait(2)
                end
                
                if AutoEnabled then
                    HarvestCrops()
                    task.wait(2)
                end
                
                if AutoEnabled then
                    SellCrops()
                    task.wait(3)
                end
            end)
            
            if not success then
                StatusLabel.Text = "Error occurred"
                task.wait(2)
            end
        end
    end)
end

-- Toggle function
local function ToggleAutoFarm()
    AutoEnabled = not AutoEnabled
    
    if AutoEnabled then
        ToggleButton.Text = "STOP AUTO FARM"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(150, 0, 0)
        StatusLabel.Text = "Auto-farm started"
        
        if AutoLoopConnection then
            task.cancel(AutoLoopConnection)
        end
        AutoFarmLoop()
    else
        ToggleButton.Text = "START AUTO FARM"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
        StatusLabel.Text = "Auto-farm stopped"
        
        if AutoLoopConnection then
            task.cancel(AutoLoopConnection)
            AutoLoopConnection = nil
        end
    end
end

-- Connect the button
if ToggleButton then
    ToggleButton.MouseButton1Click:Connect(function()
        local success = pcall(ToggleAutoFarm)
        if not success then
            warn("Failed to toggle auto-farm")
        end
    end)
end

-- Success message
print("üåü Simple Auto-Farm loaded successfully!")
print("üîß Line 1 error fixed with proper initialization")
print("üéÆ Click the button to start farming!")

-- Keep the script alive
while true do
    task.wait(1)
    
    -- Update money display
    if ShecklesCount and InfoLabel and not AutoEnabled then
        local success = pcall(function()
            InfoLabel.Text = `Money: $${ShecklesCount.Value}`
        end)
    end
end
